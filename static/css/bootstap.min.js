/*!
 * Bootstrap v5.0.1 (https://getbootstrap.com/)
 * Copyright 2011-2021 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 */
// !(function (t, e) {
//   "object" == typeof exports && "undefined" != typeof module
//     ? (module.exports = e())
//     : "function" == typeof define && define.amd
//     ? define(e)
//     : ((t =
//         "undefined" != typeof globalThis ? globalThis : t || self).bootstrap =
//         e());
// })(this, function () {
//   "use strict";
//   const t = {
//       find: (t, e = document.documentElement) =>
//         [].concat(...Element.prototype.querySelectorAll.call(e, t)),
//       findOne: (t, e = document.documentElement) =>
//         Element.prototype.querySelector.call(e, t),
//       children: (t, e) => [].concat(...t.children).filter((t) => t.matches(e)),
//       parents(t, e) {
//         const i = [];
//         let n = t.parentNode;
//         for (; n && n.nodeType === Node.ELEMENT_NODE && 3 !== n.nodeType; )
//           n.matches(e) && i.push(n), (n = n.parentNode);
//         return i;
//       },
//       prev(t, e) {
//         let i = t.previousElementSibling;
//         for (; i; ) {
//           if (i.matches(e)) return [i];
//           i = i.previousElementSibling;
//         }
//         return [];
//       },
//       next(t, e) {
//         let i = t.nextElementSibling;
//         for (; i; ) {
//           if (i.matches(e)) return [i];
//           i = i.nextElementSibling;
//         }
//         return [];
//       },
//     },
//     e = (t) => {
//       do {
//         t += Math.floor(1e6 * Math.random());
//       } while (document.getElementById(t));
//       return t;
//     },
//     i = (t) => {
//       let e = t.getAttribute("data-bs-target");
//       if (!e || "#" === e) {
//         let i = t.getAttribute("href");
//         if (!i || (!i.includes("#") && !i.startsWith("."))) return null;
//         i.includes("#") && !i.startsWith("#") && (i = "#" + i.split("#")[1]),
//           (e = i && "#" !== i ? i.trim() : null);
//       }
//       return e;
//     },
//     n = (t) => {
//       const e = i(t);
//       return e && document.querySelector(e) ? e : null;
//     },
//     s = (t) => {
//       const e = i(t);
//       return e ? document.querySelector(e) : null;
//     },
//     o = (t) => {
//       if (!t) return 0;
//       let { transitionDuration: e, transitionDelay: i } =
//         window.getComputedStyle(t);
//       const n = Number.parseFloat(e),
//         s = Number.parseFloat(i);
//       return n || s
//         ? ((e = e.split(",")[0]),
//           (i = i.split(",")[0]),
//           1e3 * (Number.parseFloat(e) + Number.parseFloat(i)))
//         : 0;
//     },
//     r = (t) => {
//       t.dispatchEvent(new Event("transitionend"));
//     },
//     a = (t) =>
//       !(!t || "object" != typeof t) &&
//       (void 0 !== t.jquery && (t = t[0]), void 0 !== t.nodeType),
//     l = (e) =>
//       a(e)
//         ? e.jquery
//           ? e[0]
//           : e
//         : "string" == typeof e && e.length > 0
//         ? t.findOne(e)
//         : null,
//     c = (t, e) => {
//       let i = !1;
//       const n = e + 5;
//       t.addEventListener("transitionend", function e() {
//         (i = !0), t.removeEventListener("transitionend", e);
//       }),
//         setTimeout(() => {
//           i || r(t);
//         }, n);
//     },
//     d = (t, e, i) => {
//       Object.keys(i).forEach((n) => {
//         const s = i[n],
//           o = e[n],
//           r =
//             o && a(o)
//               ? "element"
//               : null == (l = o)
//               ? "" + l
//               : {}.toString
//                   .call(l)
//                   .match(/\s([a-z]+)/i)[1]
//                   .toLowerCase();
//         var l;
//         if (!new RegExp(s).test(r))
//           throw new TypeError(
//             `${t.toUpperCase()}: Option "${n}" provided type "${r}" but expected type "${s}".`
//           );
//       });
//     },
//     h = (t) => {
//       if (!t) return !1;
//       if (t.style && t.parentNode && t.parentNode.style) {
//         const e = getComputedStyle(t),
//           i = getComputedStyle(t.parentNode);
//         return (
//           "none" !== e.display &&
//           "none" !== i.display &&
//           "hidden" !== e.visibility
//         );
//       }
//       return !1;
//     },
//     u = (t) =>
//       !t ||
//       t.nodeType !== Node.ELEMENT_NODE ||
//       !!t.classList.contains("disabled") ||
//       (void 0 !== t.disabled
//         ? t.disabled
//         : t.hasAttribute("disabled") && "false" !== t.getAttribute("disabled")),
//     f = (t) => {
//       if (!document.documentElement.attachShadow) return null;
//       if ("function" == typeof t.getRootNode) {
//         const e = t.getRootNode();
//         return e instanceof ShadowRoot ? e : null;
//       }
//       return t instanceof ShadowRoot
//         ? t
//         : t.parentNode
//         ? f(t.parentNode)
//         : null;
//     },
//     p = () => {},
//     m = (t) => t.offsetHeight,
//     g = () => {
//       const { jQuery: t } = window;
//       return t && !document.body.hasAttribute("data-bs-no-jquery") ? t : null;
//     },
//     _ = () => "rtl" === document.documentElement.dir,
//     b = (t) => {
//       var e;
//       (e = () => {
//         const e = g();
//         if (e) {
//           const i = t.NAME,
//             n = e.fn[i];
//           (e.fn[i] = t.jQueryInterface),
//             (e.fn[i].Constructor = t),
//             (e.fn[i].noConflict = () => ((e.fn[i] = n), t.jQueryInterface));
//         }
//       }),
//         "loading" === document.readyState
//           ? document.addEventListener("DOMContentLoaded", e)
//           : e();
//     },
//     v = (t) => {
//       "function" == typeof t && t();
//     },
//     y = new Map();
//   var w = {
//     set(t, e, i) {
//       y.has(t) || y.set(t, new Map());
//       const n = y.get(t);
//       n.has(e) || 0 === n.size
//         ? n.set(e, i)
//         : console.error(
//             `Bootstrap doesn't allow more than one instance per element. Bound instance: ${
//               Array.from(n.keys())[0]
//             }.`
//           );
//     },
//     get: (t, e) => (y.has(t) && y.get(t).get(e)) || null,
//     remove(t, e) {
//       if (!y.has(t)) return;
//       const i = y.get(t);
//       i.delete(e), 0 === i.size && y.delete(t);
//     },
//   };
//   const E = /[^.]*(?=\..*)\.|.*/,
//     T = /\..*/,
//     A = /::\d+$/,
//     L = {};
//   let O = 1;
//   const k = { mouseenter: "mouseover", mouseleave: "mouseout" },
//     C = /^(mouseenter|mouseleave)/i,
//     x = new Set([
//       "click",
//       "dblclick",
//       "mouseup",
//       "mousedown",
//       "contextmenu",
//       "mousewheel",
//       "DOMMouseScroll",
//       "mouseover",
//       "mouseout",
//       "mousemove",
//       "selectstart",
//       "selectend",
//       "keydown",
//       "keypress",
//       "keyup",
//       "orientationchange",
//       "touchstart",
//       "touchmove",
//       "touchend",
//       "touchcancel",
//       "pointerdown",
//       "pointermove",
//       "pointerup",
//       "pointerleave",
//       "pointercancel",
//       "gesturestart",
//       "gesturechange",
//       "gestureend",
//       "focus",
//       "blur",
//       "change",
//       "reset",
//       "select",
//       "submit",
//       "focusin",
//       "focusout",
//       "load",
//       "unload",
//       "beforeunload",
//       "resize",
//       "move",
//       "DOMContentLoaded",
//       "readystatechange",
//       "error",
//       "abort",
//       "scroll",
//     ]);
//   function D(t, e) {
//     return (e && `${e}::${O++}`) || t.uidEvent || O++;
//   }
//   function N(t) {
//     const e = D(t);
//     return (t.uidEvent = e), (L[e] = L[e] || {}), L[e];
//   }
//   function S(t, e, i = null) {
//     const n = Object.keys(t);
//     for (let s = 0, o = n.length; s < o; s++) {
//       const o = t[n[s]];
//       if (o.originalHandler === e && o.delegationSelector === i) return o;
//     }
//     return null;
//   }
//   function I(t, e, i) {
//     const n = "string" == typeof e,
//       s = n ? i : e;
//     let o = M(t);
//     return x.has(o) || (o = t), [n, s, o];
//   }
//   function j(t, e, i, n, s) {
//     if ("string" != typeof e || !t) return;
//     if ((i || ((i = n), (n = null)), C.test(e))) {
//       const t = (t) =>
//         function (e) {
//           if (
//             !e.relatedTarget ||
//             (e.relatedTarget !== e.delegateTarget &&
//               !e.delegateTarget.contains(e.relatedTarget))
//           )
//             return t.call(this, e);
//         };
//       n ? (n = t(n)) : (i = t(i));
//     }
//     const [o, r, a] = I(e, i, n),
//       l = N(t),
//       c = l[a] || (l[a] = {}),
//       d = S(c, r, o ? i : null);
//     if (d) return void (d.oneOff = d.oneOff && s);
//     const h = D(r, e.replace(E, "")),
//       u = o
//         ? (function (t, e, i) {
//             return function n(s) {
//               const o = t.querySelectorAll(e);
//               for (let { target: r } = s; r && r !== this; r = r.parentNode)
//                 for (let a = o.length; a--; )
//                   if (o[a] === r)
//                     return (
//                       (s.delegateTarget = r),
//                       n.oneOff && H.off(t, s.type, e, i),
//                       i.apply(r, [s])
//                     );
//               return null;
//             };
//           })(t, i, n)
//         : (function (t, e) {
//             return function i(n) {
//               return (
//                 (n.delegateTarget = t),
//                 i.oneOff && H.off(t, n.type, e),
//                 e.apply(t, [n])
//               );
//             };
//           })(t, i);
//     (u.delegationSelector = o ? i : null),
//       (u.originalHandler = r),
//       (u.oneOff = s),
//       (u.uidEvent = h),
//       (c[h] = u),
//       t.addEventListener(a, u, o);
//   }
//   function P(t, e, i, n, s) {
//     const o = S(e[i], n, s);
//     o && (t.removeEventListener(i, o, Boolean(s)), delete e[i][o.uidEvent]);
//   }
//   function M(t) {
//     return (t = t.replace(T, "")), k[t] || t;
//   }
//   const H = {
//     on(t, e, i, n) {
//       j(t, e, i, n, !1);
//     },
//     one(t, e, i, n) {
//       j(t, e, i, n, !0);
//     },
//     off(t, e, i, n) {
//       if ("string" != typeof e || !t) return;
//       const [s, o, r] = I(e, i, n),
//         a = r !== e,
//         l = N(t),
//         c = e.startsWith(".");
//       if (void 0 !== o) {
//         if (!l || !l[r]) return;
//         return void P(t, l, r, o, s ? i : null);
//       }
//       c &&
//         Object.keys(l).forEach((i) => {
//           !(function (t, e, i, n) {
//             const s = e[i] || {};
//             Object.keys(s).forEach((o) => {
//               if (o.includes(n)) {
//                 const n = s[o];
//                 P(t, e, i, n.originalHandler, n.delegationSelector);
//               }
//             });
//           })(t, l, i, e.slice(1));
//         });
//       const d = l[r] || {};
//       Object.keys(d).forEach((i) => {
//         const n = i.replace(A, "");
//         if (!a || e.includes(n)) {
//           const e = d[i];
//           P(t, l, r, e.originalHandler, e.delegationSelector);
//         }
//       });
//     },
//     trigger(t, e, i) {
//       if ("string" != typeof e || !t) return null;
//       const n = g(),
//         s = M(e),
//         o = e !== s,
//         r = x.has(s);
//       let a,
//         l = !0,
//         c = !0,
//         d = !1,
//         h = null;
//       return (
//         o &&
//           n &&
//           ((a = n.Event(e, i)),
//           n(t).trigger(a),
//           (l = !a.isPropagationStopped()),
//           (c = !a.isImmediatePropagationStopped()),
//           (d = a.isDefaultPrevented())),
//         r
//           ? ((h = document.createEvent("HTMLEvents")), h.initEvent(s, l, !0))
//           : (h = new CustomEvent(e, { bubbles: l, cancelable: !0 })),
//         void 0 !== i &&
//           Object.keys(i).forEach((t) => {
//             Object.defineProperty(h, t, { get: () => i[t] });
//           }),
//         d && h.preventDefault(),
//         c && t.dispatchEvent(h),
//         h.defaultPrevented && void 0 !== a && a.preventDefault(),
//         h
//       );
//     },
//   };
//   class R {
//     constructor(t) {
//       (t = l(t)) &&
//         ((this._element = t),
//         w.set(this._element, this.constructor.DATA_KEY, this));
//     }
//     dispose() {
//       w.remove(this._element, this.constructor.DATA_KEY),
//         H.off(this._element, this.constructor.EVENT_KEY),
//         Object.getOwnPropertyNames(this).forEach((t) => {
//           this[t] = null;
//         });
//     }
//     _queueCallback(t, e, i = !0) {
//       if (!i) return void v(t);
//       const n = o(e);
//       H.one(e, "transitionend", () => v(t)), c(e, n);
//     }
//     static getInstance(t) {
//       return w.get(t, this.DATA_KEY);
//     }
//     static get VERSION() {
//       return "5.0.1";
//     }
//     static get NAME() {
//       throw new Error(
//         'You have to implement the static method "NAME", for each component!'
//       );
//     }
//     static get DATA_KEY() {
//       return "bs." + this.NAME;
//     }
//     static get EVENT_KEY() {
//       return "." + this.DATA_KEY;
//     }
//   }
//   class B extends R {
//     static get NAME() {
//       return "alert";
//     }
//     close(t) {
//       const e = t ? this._getRootElement(t) : this._element,
//         i = this._triggerCloseEvent(e);
//       null === i || i.defaultPrevented || this._removeElement(e);
//     }
//     _getRootElement(t) {
//       return s(t) || t.closest(".alert");
//     }
//     _triggerCloseEvent(t) {
//       return H.trigger(t, "close.bs.alert");
//     }
//     _removeElement(t) {
//       t.classList.remove("show");
//       const e = t.classList.contains("fade");
//       this._queueCallback(() => this._destroyElement(t), t, e);
//     }
//     _destroyElement(t) {
//       t.parentNode && t.parentNode.removeChild(t),
//         H.trigger(t, "closed.bs.alert");
//     }
//     static jQueryInterface(t) {
//       return this.each(function () {
//         let e = w.get(this, "bs.alert");
//         e || (e = new B(this)), "close" === t && e[t](this);
//       });
//     }
//     static handleDismiss(t) {
//       return function (e) {
//         e && e.preventDefault(), t.close(this);
//       };
//     }
//   }
//   H.on(
//     document,
//     "click.bs.alert.data-api",
//     '[data-bs-dismiss="alert"]',
//     B.handleDismiss(new B())
//   ),
//     b(B);
//   class W extends R {
//     static get NAME() {
//       return "button";
//     }
//     toggle() {
//       this._element.setAttribute(
//         "aria-pressed",
//         this._element.classList.toggle("active")
//       );
//     }
//     static jQueryInterface(t) {
//       return this.each(function () {
//         let e = w.get(this, "bs.button");
//         e || (e = new W(this)), "toggle" === t && e[t]();
//       });
//     }
//   }
//   function q(t) {
//     return (
//       "true" === t ||
//       ("false" !== t &&
//         (t === Number(t).toString()
//           ? Number(t)
//           : "" === t || "null" === t
//           ? null
//           : t))
//     );
//   }
//   function z(t) {
//     return t.replace(/[A-Z]/g, (t) => "-" + t.toLowerCase());
//   }
//   H.on(
//     document,
//     "click.bs.button.data-api",
//     '[data-bs-toggle="button"]',
//     (t) => {
//       t.preventDefault();
//       const e = t.target.closest('[data-bs-toggle="button"]');
//       let i = w.get(e, "bs.button");
//       i || (i = new W(e)), i.toggle();
//     }
//   ),
//     b(W);
//   const U = {
//       setDataAttribute(t, e, i) {
//         t.setAttribute("data-bs-" + z(e), i);
//       },
//       removeDataAttribute(t, e) {
//         t.removeAttribute("data-bs-" + z(e));
//       },
//       getDataAttributes(t) {
//         if (!t) return {};
//         const e = {};
//         return (
//           Object.keys(t.dataset)
//             .filter((t) => t.startsWith("bs"))
//             .forEach((i) => {
//               let n = i.replace(/^bs/, "");
//               (n = n.charAt(0).toLowerCase() + n.slice(1, n.length)),
//                 (e[n] = q(t.dataset[i]));
//             }),
//           e
//         );
//       },
//       getDataAttribute: (t, e) => q(t.getAttribute("data-bs-" + z(e))),
//       offset(t) {
//         const e = t.getBoundingClientRect();
//         return {
//           top: e.top + document.body.scrollTop,
//           left: e.left + document.body.scrollLeft,
//         };
//       },
//       position: (t) => ({ top: t.offsetTop, left: t.offsetLeft }),
//     },
//     $ = {
//       interval: 5e3,
//       keyboard: !0,
//       slide: !1,
//       pause: "hover",
//       wrap: !0,
//       touch: !0,
//     },
//     F = {
//       interval: "(number|boolean)",
//       keyboard: "boolean",
//       slide: "(boolean|string)",
//       pause: "(string|boolean)",
//       wrap: "boolean",
//       touch: "boolean",
//     },
//     V = "next",
//     K = "prev",
//     X = "left",
//     Y = "right";
//   class Q extends R {
//     constructor(e, i) {
//       super(e),
//         (this._items = null),
//         (this._interval = null),
//         (this._activeElement = null),
//         (this._isPaused = !1),
//         (this._isSliding = !1),
//         (this.touchTimeout = null),
//         (this.touchStartX = 0),
//         (this.touchDeltaX = 0),
//         (this._config = this._getConfig(i)),
//         (this._indicatorsElement = t.findOne(
//           ".carousel-indicators",
//           this._element
//         )),
//         (this._touchSupported =
//           "ontouchstart" in document.documentElement ||
//           navigator.maxTouchPoints > 0),
//         (this._pointerEvent = Boolean(window.PointerEvent)),
//         this._addEventListeners();
//     }
//     static get Default() {
//       return $;
//     }
//     static get NAME() {
//       return "carousel";
//     }
//     next() {
//       this._isSliding || this._slide(V);
//     }
//     nextWhenVisible() {
//       !document.hidden && h(this._element) && this.next();
//     }
//     prev() {
//       this._isSliding || this._slide(K);
//     }
//     pause(e) {
//       e || (this._isPaused = !0),
//         t.findOne(".carousel-item-next, .carousel-item-prev", this._element) &&
//           (r(this._element), this.cycle(!0)),
//         clearInterval(this._interval),
//         (this._interval = null);
//     }
//     cycle(t) {
//       t || (this._isPaused = !1),
//         this._interval &&
//           (clearInterval(this._interval), (this._interval = null)),
//         this._config &&
//           this._config.interval &&
//           !this._isPaused &&
//           (this._updateInterval(),
//           (this._interval = setInterval(
//             (document.visibilityState ? this.nextWhenVisible : this.next).bind(
//               this
//             ),
//             this._config.interval
//           )));
//     }
//     to(e) {
//       this._activeElement = t.findOne(".active.carousel-item", this._element);
//       const i = this._getItemIndex(this._activeElement);
//       if (e > this._items.length - 1 || e < 0) return;
//       if (this._isSliding)
//         return void H.one(this._element, "slid.bs.carousel", () => this.to(e));
//       if (i === e) return this.pause(), void this.cycle();
//       const n = e > i ? V : K;
//       this._slide(n, this._items[e]);
//     }
//     _getConfig(t) {
//       return (t = { ...$, ...t }), d("carousel", t, F), t;
//     }
//     _handleSwipe() {
//       const t = Math.abs(this.touchDeltaX);
//       if (t <= 40) return;
//       const e = t / this.touchDeltaX;
//       (this.touchDeltaX = 0), e && this._slide(e > 0 ? Y : X);
//     }
//     _addEventListeners() {
//       this._config.keyboard &&
//         H.on(this._element, "keydown.bs.carousel", (t) => this._keydown(t)),
//         "hover" === this._config.pause &&
//           (H.on(this._element, "mouseenter.bs.carousel", (t) => this.pause(t)),
//           H.on(this._element, "mouseleave.bs.carousel", (t) => this.cycle(t))),
//         this._config.touch &&
//           this._touchSupported &&
//           this._addTouchEventListeners();
//     }
//     _addTouchEventListeners() {
//       const e = (t) => {
//           !this._pointerEvent ||
//           ("pen" !== t.pointerType && "touch" !== t.pointerType)
//             ? this._pointerEvent || (this.touchStartX = t.touches[0].clientX)
//             : (this.touchStartX = t.clientX);
//         },
//         i = (t) => {
//           this.touchDeltaX =
//             t.touches && t.touches.length > 1
//               ? 0
//               : t.touches[0].clientX - this.touchStartX;
//         },
//         n = (t) => {
//           !this._pointerEvent ||
//             ("pen" !== t.pointerType && "touch" !== t.pointerType) ||
//             (this.touchDeltaX = t.clientX - this.touchStartX),
//             this._handleSwipe(),
//             "hover" === this._config.pause &&
//               (this.pause(),
//               this.touchTimeout && clearTimeout(this.touchTimeout),
//               (this.touchTimeout = setTimeout(
//                 (t) => this.cycle(t),
//                 500 + this._config.interval
//               )));
//         };
//       t.find(".carousel-item img", this._element).forEach((t) => {
//         H.on(t, "dragstart.bs.carousel", (t) => t.preventDefault());
//       }),
//         this._pointerEvent
//           ? (H.on(this._element, "pointerdown.bs.carousel", (t) => e(t)),
//             H.on(this._element, "pointerup.bs.carousel", (t) => n(t)),
//             this._element.classList.add("pointer-event"))
//           : (H.on(this._element, "touchstart.bs.carousel", (t) => e(t)),
//             H.on(this._element, "touchmove.bs.carousel", (t) => i(t)),
//             H.on(this._element, "touchend.bs.carousel", (t) => n(t)));
//     }
//     _keydown(t) {
//       /input|textarea/i.test(t.target.tagName) ||
//         ("ArrowLeft" === t.key
//           ? (t.preventDefault(), this._slide(Y))
//           : "ArrowRight" === t.key && (t.preventDefault(), this._slide(X)));
//     }
//     _getItemIndex(e) {
//       return (
//         (this._items =
//           e && e.parentNode ? t.find(".carousel-item", e.parentNode) : []),
//         this._items.indexOf(e)
//       );
//     }
//     _getItemByOrder(t, e) {
//       const i = t === V,
//         n = t === K,
//         s = this._getItemIndex(e),
//         o = this._items.length - 1;
//       if (((n && 0 === s) || (i && s === o)) && !this._config.wrap) return e;
//       const r = (s + (n ? -1 : 1)) % this._items.length;
//       return -1 === r ? this._items[this._items.length - 1] : this._items[r];
//     }
//     _triggerSlideEvent(e, i) {
//       const n = this._getItemIndex(e),
//         s = this._getItemIndex(
//           t.findOne(".active.carousel-item", this._element)
//         );
//       return H.trigger(this._element, "slide.bs.carousel", {
//         relatedTarget: e,
//         direction: i,
//         from: s,
//         to: n,
//       });
//     }
//     _setActiveIndicatorElement(e) {
//       if (this._indicatorsElement) {
//         const i = t.findOne(".active", this._indicatorsElement);
//         i.classList.remove("active"), i.removeAttribute("aria-current");
//         const n = t.find("[data-bs-target]", this._indicatorsElement);
//         for (let t = 0; t < n.length; t++)
//           if (
//             Number.parseInt(n[t].getAttribute("data-bs-slide-to"), 10) ===
//             this._getItemIndex(e)
//           ) {
//             n[t].classList.add("active"),
//               n[t].setAttribute("aria-current", "true");
//             break;
//           }
//       }
//     }
//     _updateInterval() {
//       const e =
//         this._activeElement ||
//         t.findOne(".active.carousel-item", this._element);
//       if (!e) return;
//       const i = Number.parseInt(e.getAttribute("data-bs-interval"), 10);
//       i
//         ? ((this._config.defaultInterval =
//             this._config.defaultInterval || this._config.interval),
//           (this._config.interval = i))
//         : (this._config.interval =
//             this._config.defaultInterval || this._config.interval);
//     }
//     _slide(e, i) {
//       const n = this._directionToOrder(e),
//         s = t.findOne(".active.carousel-item", this._element),
//         o = this._getItemIndex(s),
//         r = i || this._getItemByOrder(n, s),
//         a = this._getItemIndex(r),
//         l = Boolean(this._interval),
//         c = n === V,
//         d = c ? "carousel-item-start" : "carousel-item-end",
//         h = c ? "carousel-item-next" : "carousel-item-prev",
//         u = this._orderToDirection(n);
//       if (r && r.classList.contains("active"))
//         return void (this._isSliding = !1);
//       if (this._triggerSlideEvent(r, u).defaultPrevented) return;
//       if (!s || !r) return;
//       (this._isSliding = !0),
//         l && this.pause(),
//         this._setActiveIndicatorElement(r),
//         (this._activeElement = r);
//       const f = () => {
//         H.trigger(this._element, "slid.bs.carousel", {
//           relatedTarget: r,
//           direction: u,
//           from: o,
//           to: a,
//         });
//       };
//       if (this._element.classList.contains("slide")) {
//         r.classList.add(h), m(r), s.classList.add(d), r.classList.add(d);
//         const t = () => {
//           r.classList.remove(d, h),
//             r.classList.add("active"),
//             s.classList.remove("active", h, d),
//             (this._isSliding = !1),
//             setTimeout(f, 0);
//         };
//         this._queueCallback(t, s, !0);
//       } else s.classList.remove("active"), r.classList.add("active"), (this._isSliding = !1), f();
//       l && this.cycle();
//     }
//     _directionToOrder(t) {
//       return [Y, X].includes(t)
//         ? _()
//           ? t === X
//             ? K
//             : V
//           : t === X
//           ? V
//           : K
//         : t;
//     }
//     _orderToDirection(t) {
//       return [V, K].includes(t)
//         ? _()
//           ? t === K
//             ? X
//             : Y
//           : t === K
//           ? Y
//           : X
//         : t;
//     }
//     static carouselInterface(t, e) {
//       let i = w.get(t, "bs.carousel"),
//         n = { ...$, ...U.getDataAttributes(t) };
//       "object" == typeof e && (n = { ...n, ...e });
//       const s = "string" == typeof e ? e : n.slide;
//       if ((i || (i = new Q(t, n)), "number" == typeof e)) i.to(e);
//       else if ("string" == typeof s) {
//         if (void 0 === i[s]) throw new TypeError(`No method named "${s}"`);
//         i[s]();
//       } else n.interval && n.ride && (i.pause(), i.cycle());
//     }
//     static jQueryInterface(t) {
//       return this.each(function () {
//         Q.carouselInterface(this, t);
//       });
//     }
//     static dataApiClickHandler(t) {
//       const e = s(this);
//       if (!e || !e.classList.contains("carousel")) return;
//       const i = { ...U.getDataAttributes(e), ...U.getDataAttributes(this) },
//         n = this.getAttribute("data-bs-slide-to");
//       n && (i.interval = !1),
//         Q.carouselInterface(e, i),
//         n && w.get(e, "bs.carousel").to(n),
//         t.preventDefault();
//     }
//   }
//   H.on(
//     document,
//     "click.bs.carousel.data-api",
//     "[data-bs-slide], [data-bs-slide-to]",
//     Q.dataApiClickHandler
//   ),
//     H.on(window, "load.bs.carousel.data-api", () => {
//       const e = t.find('[data-bs-ride="carousel"]');
//       for (let t = 0, i = e.length; t < i; t++)
//         Q.carouselInterface(e[t], w.get(e[t], "bs.carousel"));
//     }),
//     b(Q);
//   const G = { toggle: !0, parent: "" },
//     Z = { toggle: "boolean", parent: "(string|element)" };
//   class J extends R {
//     constructor(e, i) {
//       super(e),
//         (this._isTransitioning = !1),
//         (this._config = this._getConfig(i)),
//         (this._triggerArray = t.find(
//           `[data-bs-toggle="collapse"][href="#${this._element.id}"],[data-bs-toggle="collapse"][data-bs-target="#${this._element.id}"]`
//         ));
//       const s = t.find('[data-bs-toggle="collapse"]');
//       for (let e = 0, i = s.length; e < i; e++) {
//         const i = s[e],
//           o = n(i),
//           r = t.find(o).filter((t) => t === this._element);
//         null !== o &&
//           r.length &&
//           ((this._selector = o), this._triggerArray.push(i));
//       }
//       (this._parent = this._config.parent ? this._getParent() : null),
//         this._config.parent ||
//           this._addAriaAndCollapsedClass(this._element, this._triggerArray),
//         this._config.toggle && this.toggle();
//     }
//     static get Default() {
//       return G;
//     }
//     static get NAME() {
//       return "collapse";
//     }
//     toggle() {
//       this._element.classList.contains("show") ? this.hide() : this.show();
//     }
//     show() {
//       if (this._isTransitioning || this._element.classList.contains("show"))
//         return;
//       let e, i;
//       this._parent &&
//         ((e = t
//           .find(".show, .collapsing", this._parent)
//           .filter((t) =>
//             "string" == typeof this._config.parent
//               ? t.getAttribute("data-bs-parent") === this._config.parent
//               : t.classList.contains("collapse")
//           )),
//         0 === e.length && (e = null));
//       const n = t.findOne(this._selector);
//       if (e) {
//         const t = e.find((t) => n !== t);
//         if (((i = t ? w.get(t, "bs.collapse") : null), i && i._isTransitioning))
//           return;
//       }
//       if (H.trigger(this._element, "show.bs.collapse").defaultPrevented) return;
//       e &&
//         e.forEach((t) => {
//           n !== t && J.collapseInterface(t, "hide"),
//             i || w.set(t, "bs.collapse", null);
//         });
//       const s = this._getDimension();
//       this._element.classList.remove("collapse"),
//         this._element.classList.add("collapsing"),
//         (this._element.style[s] = 0),
//         this._triggerArray.length &&
//           this._triggerArray.forEach((t) => {
//             t.classList.remove("collapsed"),
//               t.setAttribute("aria-expanded", !0);
//           }),
//         this.setTransitioning(!0);
//       const o = "scroll" + (s[0].toUpperCase() + s.slice(1));
//       this._queueCallback(
//         () => {
//           this._element.classList.remove("collapsing"),
//             this._element.classList.add("collapse", "show"),
//             (this._element.style[s] = ""),
//             this.setTransitioning(!1),
//             H.trigger(this._element, "shown.bs.collapse");
//         },
//         this._element,
//         !0
//       ),
//         (this._element.style[s] = this._element[o] + "px");
//     }
//     hide() {
//       if (this._isTransitioning || !this._element.classList.contains("show"))
//         return;
//       if (H.trigger(this._element, "hide.bs.collapse").defaultPrevented) return;
//       const t = this._getDimension();
//       (this._element.style[t] =
//         this._element.getBoundingClientRect()[t] + "px"),
//         m(this._element),
//         this._element.classList.add("collapsing"),
//         this._element.classList.remove("collapse", "show");
//       const e = this._triggerArray.length;
//       if (e > 0)
//         for (let t = 0; t < e; t++) {
//           const e = this._triggerArray[t],
//             i = s(e);
//           i &&
//             !i.classList.contains("show") &&
//             (e.classList.add("collapsed"), e.setAttribute("aria-expanded", !1));
//         }
//       this.setTransitioning(!0),
//         (this._element.style[t] = ""),
//         this._queueCallback(
//           () => {
//             this.setTransitioning(!1),
//               this._element.classList.remove("collapsing"),
//               this._element.classList.add("collapse"),
//               H.trigger(this._element, "hidden.bs.collapse");
//           },
//           this._element,
//           !0
//         );
//     }
//     setTransitioning(t) {
//       this._isTransitioning = t;
//     }
//     _getConfig(t) {
//       return (
//         ((t = { ...G, ...t }).toggle = Boolean(t.toggle)),
//         d("collapse", t, Z),
//         t
//       );
//     }
//     _getDimension() {
//       return this._element.classList.contains("width") ? "width" : "height";
//     }
//     _getParent() {
//       let { parent: e } = this._config;
//       e = l(e);
//       const i = `[data-bs-toggle="collapse"][data-bs-parent="${e}"]`;
//       return (
//         t.find(i, e).forEach((t) => {
//           const e = s(t);
//           this._addAriaAndCollapsedClass(e, [t]);
//         }),
//         e
//       );
//     }
//     _addAriaAndCollapsedClass(t, e) {
//       if (!t || !e.length) return;
//       const i = t.classList.contains("show");
//       e.forEach((t) => {
//         i ? t.classList.remove("collapsed") : t.classList.add("collapsed"),
//           t.setAttribute("aria-expanded", i);
//       });
//     }
//     static collapseInterface(t, e) {
//       let i = w.get(t, "bs.collapse");
//       const n = {
//         ...G,
//         ...U.getDataAttributes(t),
//         ...("object" == typeof e && e ? e : {}),
//       };
//       if (
//         (!i &&
//           n.toggle &&
//           "string" == typeof e &&
//           /show|hide/.test(e) &&
//           (n.toggle = !1),
//         i || (i = new J(t, n)),
//         "string" == typeof e)
//       ) {
//         if (void 0 === i[e]) throw new TypeError(`No method named "${e}"`);
//         i[e]();
//       }
//     }
//     static jQueryInterface(t) {
//       return this.each(function () {
//         J.collapseInterface(this, t);
//       });
//     }
//   }
//   H.on(
//     document,
//     "click.bs.collapse.data-api",
//     '[data-bs-toggle="collapse"]',
//     function (e) {
//       ("A" === e.target.tagName ||
//         (e.delegateTarget && "A" === e.delegateTarget.tagName)) &&
//         e.preventDefault();
//       const i = U.getDataAttributes(this),
//         s = n(this);
//       t.find(s).forEach((t) => {
//         const e = w.get(t, "bs.collapse");
//         let n;
//         e
//           ? (null === e._parent &&
//               "string" == typeof i.parent &&
//               ((e._config.parent = i.parent), (e._parent = e._getParent())),
//             (n = "toggle"))
//           : (n = i),
//           J.collapseInterface(t, n);
//       });
//     }
//   ),
//     b(J);
//   var tt = "top",
//     et = "bottom",
//     it = "right",
//     nt = "left",
//     st = [tt, et, it, nt],
//     ot = st.reduce(function (t, e) {
//       return t.concat([e + "-start", e + "-end"]);
//     }, []),
//     rt = [].concat(st, ["auto"]).reduce(function (t, e) {
//       return t.concat([e, e + "-start", e + "-end"]);
//     }, []),
//     at = [
//       "beforeRead",
//       "read",
//       "afterRead",
//       "beforeMain",
//       "main",
//       "afterMain",
//       "beforeWrite",
//       "write",
//       "afterWrite",
//     ];
//   function lt(t) {
//     return t ? (t.nodeName || "").toLowerCase() : null;
//   }
//   function ct(t) {
//     if (null == t) return window;
//     if ("[object Window]" !== t.toString()) {
//       var e = t.ownerDocument;
//       return (e && e.defaultView) || window;
//     }
//     return t;
//   }
//   function dt(t) {
//     return t instanceof ct(t).Element || t instanceof Element;
//   }
//   function ht(t) {
//     return t instanceof ct(t).HTMLElement || t instanceof HTMLElement;
//   }
//   function ut(t) {
//     return (
//       "undefined" != typeof ShadowRoot &&
//       (t instanceof ct(t).ShadowRoot || t instanceof ShadowRoot)
//     );
//   }
//   var ft = {
//     name: "applyStyles",
//     enabled: !0,
//     phase: "write",
//     fn: function (t) {
//       var e = t.state;
//       Object.keys(e.elements).forEach(function (t) {
//         var i = e.styles[t] || {},
//           n = e.attributes[t] || {},
//           s = e.elements[t];
//         ht(s) &&
//           lt(s) &&
//           (Object.assign(s.style, i),
//           Object.keys(n).forEach(function (t) {
//             var e = n[t];
//             !1 === e
//               ? s.removeAttribute(t)
//               : s.setAttribute(t, !0 === e ? "" : e);
//           }));
//       });
//     },
//     effect: function (t) {
//       var e = t.state,
//         i = {
//           popper: {
//             position: e.options.strategy,
//             left: "0",
//             top: "0",
//             margin: "0",
//           },
//           arrow: { position: "absolute" },
//           reference: {},
//         };
//       return (
//         Object.assign(e.elements.popper.style, i.popper),
//         (e.styles = i),
//         e.elements.arrow && Object.assign(e.elements.arrow.style, i.arrow),
//         function () {
//           Object.keys(e.elements).forEach(function (t) {
//             var n = e.elements[t],
//               s = e.attributes[t] || {},
//               o = Object.keys(
//                 e.styles.hasOwnProperty(t) ? e.styles[t] : i[t]
//               ).reduce(function (t, e) {
//                 return (t[e] = ""), t;
//               }, {});
//             ht(n) &&
//               lt(n) &&
//               (Object.assign(n.style, o),
//               Object.keys(s).forEach(function (t) {
//                 n.removeAttribute(t);
//               }));
//           });
//         }
//       );
//     },
//     requires: ["computeStyles"],
//   };
//   function pt(t) {
//     return t.split("-")[0];
//   }
//   function mt(t) {
//     var e = t.getBoundingClientRect();
//     return {
//       width: e.width,
//       height: e.height,
//       top: e.top,
//       right: e.right,
//       bottom: e.bottom,
//       left: e.left,
//       x: e.left,
//       y: e.top,
//     };
//   }
//   function gt(t) {
//     var e = mt(t),
//       i = t.offsetWidth,
//       n = t.offsetHeight;
//     return (
//       Math.abs(e.width - i) <= 1 && (i = e.width),
//       Math.abs(e.height - n) <= 1 && (n = e.height),
//       { x: t.offsetLeft, y: t.offsetTop, width: i, height: n }
//     );
//   }
//   function _t(t, e) {
//     var i = e.getRootNode && e.getRootNode();
//     if (t.contains(e)) return !0;
//     if (i && ut(i)) {
//       var n = e;
//       do {
//         if (n && t.isSameNode(n)) return !0;
//         n = n.parentNode || n.host;
//       } while (n);
//     }
//     return !1;
//   }
//   function bt(t) {
//     return ct(t).getComputedStyle(t);
//   }
//   function vt(t) {
//     return ["table", "td", "th"].indexOf(lt(t)) >= 0;
//   }
//   function yt(t) {
//     return (
//       (dt(t) ? t.ownerDocument : t.document) || window.document
//     ).documentElement;
//   }
//   function wt(t) {
//     return "html" === lt(t)
//       ? t
//       : t.assignedSlot || t.parentNode || (ut(t) ? t.host : null) || yt(t);
//   }
//   function Et(t) {
//     return ht(t) && "fixed" !== bt(t).position ? t.offsetParent : null;
//   }
//   function Tt(t) {
//     for (var e = ct(t), i = Et(t); i && vt(i) && "static" === bt(i).position; )
//       i = Et(i);
//     return i &&
//       ("html" === lt(i) || ("body" === lt(i) && "static" === bt(i).position))
//       ? e
//       : i ||
//           (function (t) {
//             var e = -1 !== navigator.userAgent.toLowerCase().indexOf("firefox");
//             if (
//               -1 !== navigator.userAgent.indexOf("Trident") &&
//               ht(t) &&
//               "fixed" === bt(t).position
//             )
//               return null;
//             for (
//               var i = wt(t);
//               ht(i) && ["html", "body"].indexOf(lt(i)) < 0;

//             ) {
//               var n = bt(i);
//               if (
//                 "none" !== n.transform ||
//                 "none" !== n.perspective ||
//                 "paint" === n.contain ||
//                 -1 !== ["transform", "perspective"].indexOf(n.willChange) ||
//                 (e && "filter" === n.willChange) ||
//                 (e && n.filter && "none" !== n.filter)
//               )
//                 return i;
//               i = i.parentNode;
//             }
//             return null;
//           })(t) ||
//           e;
//   }
//   function At(t) {
//     return ["top", "bottom"].indexOf(t) >= 0 ? "x" : "y";
//   }
//   var Lt = Math.max,
//     Ot = Math.min,
//     kt = Math.round;
//   function Ct(t, e, i) {
//     return Lt(t, Ot(e, i));
//   }
//   function xt(t) {
//     return Object.assign({}, { top: 0, right: 0, bottom: 0, left: 0 }, t);
//   }
//   function Dt(t, e) {
//     return e.reduce(function (e, i) {
//       return (e[i] = t), e;
//     }, {});
//   }
//   var Nt = {
//       name: "arrow",
//       enabled: !0,
//       phase: "main",
//       fn: function (t) {
//         var e,
//           i = t.state,
//           n = t.name,
//           s = t.options,
//           o = i.elements.arrow,
//           r = i.modifiersData.popperOffsets,
//           a = pt(i.placement),
//           l = At(a),
//           c = [nt, it].indexOf(a) >= 0 ? "height" : "width";
//         if (o && r) {
//           var d = (function (t, e) {
//               return xt(
//                 "number" !=
//                   typeof (t =
//                     "function" == typeof t
//                       ? t(
//                           Object.assign({}, e.rects, { placement: e.placement })
//                         )
//                       : t)
//                   ? t
//                   : Dt(t, st)
//               );
//             })(s.padding, i),
//             h = gt(o),
//             u = "y" === l ? tt : nt,
//             f = "y" === l ? et : it,
//             p =
//               i.rects.reference[c] +
//               i.rects.reference[l] -
//               r[l] -
//               i.rects.popper[c],
//             m = r[l] - i.rects.reference[l],
//             g = Tt(o),
//             _ = g ? ("y" === l ? g.clientHeight || 0 : g.clientWidth || 0) : 0,
//             b = p / 2 - m / 2,
//             v = d[u],
//             y = _ - h[c] - d[f],
//             w = _ / 2 - h[c] / 2 + b,
//             E = Ct(v, w, y),
//             T = l;
//           i.modifiersData[n] = (((e = {})[T] = E), (e.centerOffset = E - w), e);
//         }
//       },
//       effect: function (t) {
//         var e = t.state,
//           i = t.options.element,
//           n = void 0 === i ? "[data-popper-arrow]" : i;
//         null != n &&
//           ("string" != typeof n || (n = e.elements.popper.querySelector(n))) &&
//           _t(e.elements.popper, n) &&
//           (e.elements.arrow = n);
//       },
//       requires: ["popperOffsets"],
//       requiresIfExists: ["preventOverflow"],
//     },
//     St = { top: "auto", right: "auto", bottom: "auto", left: "auto" };
//   function It(t) {
//     var e,
//       i = t.popper,
//       n = t.popperRect,
//       s = t.placement,
//       o = t.offsets,
//       r = t.position,
//       a = t.gpuAcceleration,
//       l = t.adaptive,
//       c = t.roundOffsets,
//       d =
//         !0 === c
//           ? (function (t) {
//               var e = t.x,
//                 i = t.y,
//                 n = window.devicePixelRatio || 1;
//               return { x: kt(kt(e * n) / n) || 0, y: kt(kt(i * n) / n) || 0 };
//             })(o)
//           : "function" == typeof c
//           ? c(o)
//           : o,
//       h = d.x,
//       u = void 0 === h ? 0 : h,
//       f = d.y,
//       p = void 0 === f ? 0 : f,
//       m = o.hasOwnProperty("x"),
//       g = o.hasOwnProperty("y"),
//       _ = nt,
//       b = tt,
//       v = window;
//     if (l) {
//       var y = Tt(i),
//         w = "clientHeight",
//         E = "clientWidth";
//       y === ct(i) &&
//         "static" !== bt((y = yt(i))).position &&
//         ((w = "scrollHeight"), (E = "scrollWidth")),
//         (y = y),
//         s === tt && ((b = et), (p -= y[w] - n.height), (p *= a ? 1 : -1)),
//         s === nt && ((_ = it), (u -= y[E] - n.width), (u *= a ? 1 : -1));
//     }
//     var T,
//       A = Object.assign({ position: r }, l && St);
//     return a
//       ? Object.assign(
//           {},
//           A,
//           (((T = {})[b] = g ? "0" : ""),
//           (T[_] = m ? "0" : ""),
//           (T.transform =
//             (v.devicePixelRatio || 1) < 2
//               ? "translate(" + u + "px, " + p + "px)"
//               : "translate3d(" + u + "px, " + p + "px, 0)"),
//           T)
//         )
//       : Object.assign(
//           {},
//           A,
//           (((e = {})[b] = g ? p + "px" : ""),
//           (e[_] = m ? u + "px" : ""),
//           (e.transform = ""),
//           e)
//         );
//   }
//   var jt = {
//       name: "computeStyles",
//       enabled: !0,
//       phase: "beforeWrite",
//       fn: function (t) {
//         var e = t.state,
//           i = t.options,
//           n = i.gpuAcceleration,
//           s = void 0 === n || n,
//           o = i.adaptive,
//           r = void 0 === o || o,
//           a = i.roundOffsets,
//           l = void 0 === a || a,
//           c = {
//             placement: pt(e.placement),
//             popper: e.elements.popper,
//             popperRect: e.rects.popper,
//             gpuAcceleration: s,
//           };
//         null != e.modifiersData.popperOffsets &&
//           (e.styles.popper = Object.assign(
//             {},
//             e.styles.popper,
//             It(
//               Object.assign({}, c, {
//                 offsets: e.modifiersData.popperOffsets,
//                 position: e.options.strategy,
//                 adaptive: r,
//                 roundOffsets: l,
//               })
//             )
//           )),
//           null != e.modifiersData.arrow &&
//             (e.styles.arrow = Object.assign(
//               {},
//               e.styles.arrow,
//               It(
//                 Object.assign({}, c, {
//                   offsets: e.modifiersData.arrow,
//                   position: "absolute",
//                   adaptive: !1,
//                   roundOffsets: l,
//                 })
//               )
//             )),
//           (e.attributes.popper = Object.assign({}, e.attributes.popper, {
//             "data-popper-placement": e.placement,
//           }));
//       },
//       data: {},
//     },
//     Pt = { passive: !0 },
//     Mt = {
//       name: "eventListeners",
//       enabled: !0,
//       phase: "write",
//       fn: function () {},
//       effect: function (t) {
//         var e = t.state,
//           i = t.instance,
//           n = t.options,
//           s = n.scroll,
//           o = void 0 === s || s,
//           r = n.resize,
//           a = void 0 === r || r,
//           l = ct(e.elements.popper),
//           c = [].concat(e.scrollParents.reference, e.scrollParents.popper);
//         return (
//           o &&
//             c.forEach(function (t) {
//               t.addEventListener("scroll", i.update, Pt);
//             }),
//           a && l.addEventListener("resize", i.update, Pt),
//           function () {
//             o &&
//               c.forEach(function (t) {
//                 t.removeEventListener("scroll", i.update, Pt);
//               }),
//               a && l.removeEventListener("resize", i.update, Pt);
//           }
//         );
//       },
//       data: {},
//     },
//     Ht = { left: "right", right: "left", bottom: "top", top: "bottom" };
//   function Rt(t) {
//     return t.replace(/left|right|bottom|top/g, function (t) {
//       return Ht[t];
//     });
//   }
//   var Bt = { start: "end", end: "start" };
//   function Wt(t) {
//     return t.replace(/start|end/g, function (t) {
//       return Bt[t];
//     });
//   }
//   function qt(t) {
//     var e = ct(t);
//     return { scrollLeft: e.pageXOffset, scrollTop: e.pageYOffset };
//   }
//   function zt(t) {
//     return mt(yt(t)).left + qt(t).scrollLeft;
//   }
//   function Ut(t) {
//     var e = bt(t),
//       i = e.overflow,
//       n = e.overflowX,
//       s = e.overflowY;
//     return /auto|scroll|overlay|hidden/.test(i + s + n);
//   }
//   function $t(t, e) {
//     var i;
//     void 0 === e && (e = []);
//     var n = (function t(e) {
//         return ["html", "body", "#document"].indexOf(lt(e)) >= 0
//           ? e.ownerDocument.body
//           : ht(e) && Ut(e)
//           ? e
//           : t(wt(e));
//       })(t),
//       s = n === (null == (i = t.ownerDocument) ? void 0 : i.body),
//       o = ct(n),
//       r = s ? [o].concat(o.visualViewport || [], Ut(n) ? n : []) : n,
//       a = e.concat(r);
//     return s ? a : a.concat($t(wt(r)));
//   }
//   function Ft(t) {
//     return Object.assign({}, t, {
//       left: t.x,
//       top: t.y,
//       right: t.x + t.width,
//       bottom: t.y + t.height,
//     });
//   }
//   function Vt(t, e) {
//     return "viewport" === e
//       ? Ft(
//           (function (t) {
//             var e = ct(t),
//               i = yt(t),
//               n = e.visualViewport,
//               s = i.clientWidth,
//               o = i.clientHeight,
//               r = 0,
//               a = 0;
//             return (
//               n &&
//                 ((s = n.width),
//                 (o = n.height),
//                 /^((?!chrome|android).)*safari/i.test(navigator.userAgent) ||
//                   ((r = n.offsetLeft), (a = n.offsetTop))),
//               { width: s, height: o, x: r + zt(t), y: a }
//             );
//           })(t)
//         )
//       : ht(e)
//       ? (function (t) {
//           var e = mt(t);
//           return (
//             (e.top = e.top + t.clientTop),
//             (e.left = e.left + t.clientLeft),
//             (e.bottom = e.top + t.clientHeight),
//             (e.right = e.left + t.clientWidth),
//             (e.width = t.clientWidth),
//             (e.height = t.clientHeight),
//             (e.x = e.left),
//             (e.y = e.top),
//             e
//           );
//         })(e)
//       : Ft(
//           (function (t) {
//             var e,
//               i = yt(t),
//               n = qt(t),
//               s = null == (e = t.ownerDocument) ? void 0 : e.body,
//               o = Lt(
//                 i.scrollWidth,
//                 i.clientWidth,
//                 s ? s.scrollWidth : 0,
//                 s ? s.clientWidth : 0
//               ),
//               r = Lt(
//                 i.scrollHeight,
//                 i.clientHeight,
//                 s ? s.scrollHeight : 0,
//                 s ? s.clientHeight : 0
//               ),
//               a = -n.scrollLeft + zt(t),
//               l = -n.scrollTop;
//             return (
//               "rtl" === bt(s || i).direction &&
//                 (a += Lt(i.clientWidth, s ? s.clientWidth : 0) - o),
//               { width: o, height: r, x: a, y: l }
//             );
//           })(yt(t))
//         );
//   }
//   function Kt(t) {
//     return t.split("-")[1];
//   }
//   function Xt(t) {
//     var e,
//       i = t.reference,
//       n = t.element,
//       s = t.placement,
//       o = s ? pt(s) : null,
//       r = s ? Kt(s) : null,
//       a = i.x + i.width / 2 - n.width / 2,
//       l = i.y + i.height / 2 - n.height / 2;
//     switch (o) {
//       case tt:
//         e = { x: a, y: i.y - n.height };
//         break;
//       case et:
//         e = { x: a, y: i.y + i.height };
//         break;
//       case it:
//         e = { x: i.x + i.width, y: l };
//         break;
//       case nt:
//         e = { x: i.x - n.width, y: l };
//         break;
//       default:
//         e = { x: i.x, y: i.y };
//     }
//     var c = o ? At(o) : null;
//     if (null != c) {
//       var d = "y" === c ? "height" : "width";
//       switch (r) {
//         case "start":
//           e[c] = e[c] - (i[d] / 2 - n[d] / 2);
//           break;
//         case "end":
//           e[c] = e[c] + (i[d] / 2 - n[d] / 2);
//       }
//     }
//     return e;
//   }
//   function Yt(t, e) {
//     void 0 === e && (e = {});
//     var i = e,
//       n = i.placement,
//       s = void 0 === n ? t.placement : n,
//       o = i.boundary,
//       r = void 0 === o ? "clippingParents" : o,
//       a = i.rootBoundary,
//       l = void 0 === a ? "viewport" : a,
//       c = i.elementContext,
//       d = void 0 === c ? "popper" : c,
//       h = i.altBoundary,
//       u = void 0 !== h && h,
//       f = i.padding,
//       p = void 0 === f ? 0 : f,
//       m = xt("number" != typeof p ? p : Dt(p, st)),
//       g = "popper" === d ? "reference" : "popper",
//       _ = t.elements.reference,
//       b = t.rects.popper,
//       v = t.elements[u ? g : d],
//       y = (function (t, e, i) {
//         var n =
//             "clippingParents" === e
//               ? (function (t) {
//                   var e = $t(wt(t)),
//                     i =
//                       ["absolute", "fixed"].indexOf(bt(t).position) >= 0 &&
//                       ht(t)
//                         ? Tt(t)
//                         : t;
//                   return dt(i)
//                     ? e.filter(function (t) {
//                         return dt(t) && _t(t, i) && "body" !== lt(t);
//                       })
//                     : [];
//                 })(t)
//               : [].concat(e),
//           s = [].concat(n, [i]),
//           o = s[0],
//           r = s.reduce(function (e, i) {
//             var n = Vt(t, i);
//             return (
//               (e.top = Lt(n.top, e.top)),
//               (e.right = Ot(n.right, e.right)),
//               (e.bottom = Ot(n.bottom, e.bottom)),
//               (e.left = Lt(n.left, e.left)),
//               e
//             );
//           }, Vt(t, o));
//         return (
//           (r.width = r.right - r.left),
//           (r.height = r.bottom - r.top),
//           (r.x = r.left),
//           (r.y = r.top),
//           r
//         );
//       })(dt(v) ? v : v.contextElement || yt(t.elements.popper), r, l),
//       w = mt(_),
//       E = Xt({ reference: w, element: b, strategy: "absolute", placement: s }),
//       T = Ft(Object.assign({}, b, E)),
//       A = "popper" === d ? T : w,
//       L = {
//         top: y.top - A.top + m.top,
//         bottom: A.bottom - y.bottom + m.bottom,
//         left: y.left - A.left + m.left,
//         right: A.right - y.right + m.right,
//       },
//       O = t.modifiersData.offset;
//     if ("popper" === d && O) {
//       var k = O[s];
//       Object.keys(L).forEach(function (t) {
//         var e = [it, et].indexOf(t) >= 0 ? 1 : -1,
//           i = [tt, et].indexOf(t) >= 0 ? "y" : "x";
//         L[t] += k[i] * e;
//       });
//     }
//     return L;
//   }
//   function Qt(t, e) {
//     void 0 === e && (e = {});
//     var i = e,
//       n = i.placement,
//       s = i.boundary,
//       o = i.rootBoundary,
//       r = i.padding,
//       a = i.flipVariations,
//       l = i.allowedAutoPlacements,
//       c = void 0 === l ? rt : l,
//       d = Kt(n),
//       h = d
//         ? a
//           ? ot
//           : ot.filter(function (t) {
//               return Kt(t) === d;
//             })
//         : st,
//       u = h.filter(function (t) {
//         return c.indexOf(t) >= 0;
//       });
//     0 === u.length && (u = h);
//     var f = u.reduce(function (e, i) {
//       return (
//         (e[i] = Yt(t, {
//           placement: i,
//           boundary: s,
//           rootBoundary: o,
//           padding: r,
//         })[pt(i)]),
//         e
//       );
//     }, {});
//     return Object.keys(f).sort(function (t, e) {
//       return f[t] - f[e];
//     });
//   }
//   var Gt = {
//     name: "flip",
//     enabled: !0,
//     phase: "main",
//     fn: function (t) {
//       var e = t.state,
//         i = t.options,
//         n = t.name;
//       if (!e.modifiersData[n]._skip) {
//         for (
//           var s = i.mainAxis,
//             o = void 0 === s || s,
//             r = i.altAxis,
//             a = void 0 === r || r,
//             l = i.fallbackPlacements,
//             c = i.padding,
//             d = i.boundary,
//             h = i.rootBoundary,
//             u = i.altBoundary,
//             f = i.flipVariations,
//             p = void 0 === f || f,
//             m = i.allowedAutoPlacements,
//             g = e.options.placement,
//             _ = pt(g),
//             b =
//               l ||
//               (_ !== g && p
//                 ? (function (t) {
//                     if ("auto" === pt(t)) return [];
//                     var e = Rt(t);
//                     return [Wt(t), e, Wt(e)];
//                   })(g)
//                 : [Rt(g)]),
//             v = [g].concat(b).reduce(function (t, i) {
//               return t.concat(
//                 "auto" === pt(i)
//                   ? Qt(e, {
//                       placement: i,
//                       boundary: d,
//                       rootBoundary: h,
//                       padding: c,
//                       flipVariations: p,
//                       allowedAutoPlacements: m,
//                     })
//                   : i
//               );
//             }, []),
//             y = e.rects.reference,
//             w = e.rects.popper,
//             E = new Map(),
//             T = !0,
//             A = v[0],
//             L = 0;
//           L < v.length;
//           L++
//         ) {
//           var O = v[L],
//             k = pt(O),
//             C = "start" === Kt(O),
//             x = [tt, et].indexOf(k) >= 0,
//             D = x ? "width" : "height",
//             N = Yt(e, {
//               placement: O,
//               boundary: d,
//               rootBoundary: h,
//               altBoundary: u,
//               padding: c,
//             }),
//             S = x ? (C ? it : nt) : C ? et : tt;
//           y[D] > w[D] && (S = Rt(S));
//           var I = Rt(S),
//             j = [];
//           if (
//             (o && j.push(N[k] <= 0),
//             a && j.push(N[S] <= 0, N[I] <= 0),
//             j.every(function (t) {
//               return t;
//             }))
//           ) {
//             (A = O), (T = !1);
//             break;
//           }
//           E.set(O, j);
//         }
//         if (T)
//           for (
//             var P = function (t) {
//                 var e = v.find(function (e) {
//                   var i = E.get(e);
//                   if (i)
//                     return i.slice(0, t).every(function (t) {
//                       return t;
//                     });
//                 });
//                 if (e) return (A = e), "break";
//               },
//               M = p ? 3 : 1;
//             M > 0 && "break" !== P(M);
//             M--
//           );
//         e.placement !== A &&
//           ((e.modifiersData[n]._skip = !0), (e.placement = A), (e.reset = !0));
//       }
//     },
//     requiresIfExists: ["offset"],
//     data: { _skip: !1 },
//   };
//   function Zt(t, e, i) {
//     return (
//       void 0 === i && (i = { x: 0, y: 0 }),
//       {
//         top: t.top - e.height - i.y,
//         right: t.right - e.width + i.x,
//         bottom: t.bottom - e.height + i.y,
//         left: t.left - e.width - i.x,
//       }
//     );
//   }
//   function Jt(t) {
//     return [tt, it, et, nt].some(function (e) {
//       return t[e] >= 0;
//     });
//   }
//   var te = {
//       name: "hide",
//       enabled: !0,
//       phase: "main",
//       requiresIfExists: ["preventOverflow"],
//       fn: function (t) {
//         var e = t.state,
//           i = t.name,
//           n = e.rects.reference,
//           s = e.rects.popper,
//           o = e.modifiersData.preventOverflow,
//           r = Yt(e, { elementContext: "reference" }),
//           a = Yt(e, { altBoundary: !0 }),
//           l = Zt(r, n),
//           c = Zt(a, s, o),
//           d = Jt(l),
//           h = Jt(c);
//         (e.modifiersData[i] = {
//           referenceClippingOffsets: l,
//           popperEscapeOffsets: c,
//           isReferenceHidden: d,
//           hasPopperEscaped: h,
//         }),
//           (e.attributes.popper = Object.assign({}, e.attributes.popper, {
//             "data-popper-reference-hidden": d,
//             "data-popper-escaped": h,
//           }));
//       },
//     },
//     ee = {
//       name: "offset",
//       enabled: !0,
//       phase: "main",
//       requires: ["popperOffsets"],
//       fn: function (t) {
//         var e = t.state,
//           i = t.options,
//           n = t.name,
//           s = i.offset,
//           o = void 0 === s ? [0, 0] : s,
//           r = rt.reduce(function (t, i) {
//             return (
//               (t[i] = (function (t, e, i) {
//                 var n = pt(t),
//                   s = [nt, tt].indexOf(n) >= 0 ? -1 : 1,
//                   o =
//                     "function" == typeof i
//                       ? i(Object.assign({}, e, { placement: t }))
//                       : i,
//                   r = o[0],
//                   a = o[1];
//                 return (
//                   (r = r || 0),
//                   (a = (a || 0) * s),
//                   [nt, it].indexOf(n) >= 0 ? { x: a, y: r } : { x: r, y: a }
//                 );
//               })(i, e.rects, o)),
//               t
//             );
//           }, {}),
//           a = r[e.placement],
//           l = a.x,
//           c = a.y;
//         null != e.modifiersData.popperOffsets &&
//           ((e.modifiersData.popperOffsets.x += l),
//           (e.modifiersData.popperOffsets.y += c)),
//           (e.modifiersData[n] = r);
//       },
//     },
//     ie = {
//       name: "popperOffsets",
//       enabled: !0,
//       phase: "read",
//       fn: function (t) {
//         var e = t.state,
//           i = t.name;
//         e.modifiersData[i] = Xt({
//           reference: e.rects.reference,
//           element: e.rects.popper,
//           strategy: "absolute",
//           placement: e.placement,
//         });
//       },
//       data: {},
//     },
//     ne = {
//       name: "preventOverflow",
//       enabled: !0,
//       phase: "main",
//       fn: function (t) {
//         var e = t.state,
//           i = t.options,
//           n = t.name,
//           s = i.mainAxis,
//           o = void 0 === s || s,
//           r = i.altAxis,
//           a = void 0 !== r && r,
//           l = i.boundary,
//           c = i.rootBoundary,
//           d = i.altBoundary,
//           h = i.padding,
//           u = i.tether,
//           f = void 0 === u || u,
//           p = i.tetherOffset,
//           m = void 0 === p ? 0 : p,
//           g = Yt(e, {
//             boundary: l,
//             rootBoundary: c,
//             padding: h,
//             altBoundary: d,
//           }),
//           _ = pt(e.placement),
//           b = Kt(e.placement),
//           v = !b,
//           y = At(_),
//           w = "x" === y ? "y" : "x",
//           E = e.modifiersData.popperOffsets,
//           T = e.rects.reference,
//           A = e.rects.popper,
//           L =
//             "function" == typeof m
//               ? m(Object.assign({}, e.rects, { placement: e.placement }))
//               : m,
//           O = { x: 0, y: 0 };
//         if (E) {
//           if (o || a) {
//             var k = "y" === y ? tt : nt,
//               C = "y" === y ? et : it,
//               x = "y" === y ? "height" : "width",
//               D = E[y],
//               N = E[y] + g[k],
//               S = E[y] - g[C],
//               I = f ? -A[x] / 2 : 0,
//               j = "start" === b ? T[x] : A[x],
//               P = "start" === b ? -A[x] : -T[x],
//               M = e.elements.arrow,
//               H = f && M ? gt(M) : { width: 0, height: 0 },
//               R = e.modifiersData["arrow#persistent"]
//                 ? e.modifiersData["arrow#persistent"].padding
//                 : { top: 0, right: 0, bottom: 0, left: 0 },
//               B = R[k],
//               W = R[C],
//               q = Ct(0, T[x], H[x]),
//               z = v ? T[x] / 2 - I - q - B - L : j - q - B - L,
//               U = v ? -T[x] / 2 + I + q + W + L : P + q + W + L,
//               $ = e.elements.arrow && Tt(e.elements.arrow),
//               F = $ ? ("y" === y ? $.clientTop || 0 : $.clientLeft || 0) : 0,
//               V = e.modifiersData.offset
//                 ? e.modifiersData.offset[e.placement][y]
//                 : 0,
//               K = E[y] + z - V - F,
//               X = E[y] + U - V;
//             if (o) {
//               var Y = Ct(f ? Ot(N, K) : N, D, f ? Lt(S, X) : S);
//               (E[y] = Y), (O[y] = Y - D);
//             }
//             if (a) {
//               var Q = "x" === y ? tt : nt,
//                 G = "x" === y ? et : it,
//                 Z = E[w],
//                 J = Z + g[Q],
//                 st = Z - g[G],
//                 ot = Ct(f ? Ot(J, K) : J, Z, f ? Lt(st, X) : st);
//               (E[w] = ot), (O[w] = ot - Z);
//             }
//           }
//           e.modifiersData[n] = O;
//         }
//       },
//       requiresIfExists: ["offset"],
//     };
//   function se(t, e, i) {
//     void 0 === i && (i = !1);
//     var n,
//       s,
//       o = yt(e),
//       r = mt(t),
//       a = ht(e),
//       l = { scrollLeft: 0, scrollTop: 0 },
//       c = { x: 0, y: 0 };
//     return (
//       (a || (!a && !i)) &&
//         (("body" !== lt(e) || Ut(o)) &&
//           (l =
//             (n = e) !== ct(n) && ht(n)
//               ? { scrollLeft: (s = n).scrollLeft, scrollTop: s.scrollTop }
//               : qt(n)),
//         ht(e)
//           ? (((c = mt(e)).x += e.clientLeft), (c.y += e.clientTop))
//           : o && (c.x = zt(o))),
//       {
//         x: r.left + l.scrollLeft - c.x,
//         y: r.top + l.scrollTop - c.y,
//         width: r.width,
//         height: r.height,
//       }
//     );
//   }
//   var oe = { placement: "bottom", modifiers: [], strategy: "absolute" };
//   function re() {
//     for (var t = arguments.length, e = new Array(t), i = 0; i < t; i++)
//       e[i] = arguments[i];
//     return !e.some(function (t) {
//       return !(t && "function" == typeof t.getBoundingClientRect);
//     });
//   }
//   function ae(t) {
//     void 0 === t && (t = {});
//     var e = t,
//       i = e.defaultModifiers,
//       n = void 0 === i ? [] : i,
//       s = e.defaultOptions,
//       o = void 0 === s ? oe : s;
//     return function (t, e, i) {
//       void 0 === i && (i = o);
//       var s,
//         r,
//         a = {
//           placement: "bottom",
//           orderedModifiers: [],
//           options: Object.assign({}, oe, o),
//           modifiersData: {},
//           elements: { reference: t, popper: e },
//           attributes: {},
//           styles: {},
//         },
//         l = [],
//         c = !1,
//         d = {
//           state: a,
//           setOptions: function (i) {
//             h(),
//               (a.options = Object.assign({}, o, a.options, i)),
//               (a.scrollParents = {
//                 reference: dt(t)
//                   ? $t(t)
//                   : t.contextElement
//                   ? $t(t.contextElement)
//                   : [],
//                 popper: $t(e),
//               });
//             var s,
//               r,
//               c = (function (t) {
//                 var e = (function (t) {
//                   var e = new Map(),
//                     i = new Set(),
//                     n = [];
//                   return (
//                     t.forEach(function (t) {
//                       e.set(t.name, t);
//                     }),
//                     t.forEach(function (t) {
//                       i.has(t.name) ||
//                         (function t(s) {
//                           i.add(s.name),
//                             []
//                               .concat(
//                                 s.requires || [],
//                                 s.requiresIfExists || []
//                               )
//                               .forEach(function (n) {
//                                 if (!i.has(n)) {
//                                   var s = e.get(n);
//                                   s && t(s);
//                                 }
//                               }),
//                             n.push(s);
//                         })(t);
//                     }),
//                     n
//                   );
//                 })(t);
//                 return at.reduce(function (t, i) {
//                   return t.concat(
//                     e.filter(function (t) {
//                       return t.phase === i;
//                     })
//                   );
//                 }, []);
//               })(
//                 ((s = [].concat(n, a.options.modifiers)),
//                 (r = s.reduce(function (t, e) {
//                   var i = t[e.name];
//                   return (
//                     (t[e.name] = i
//                       ? Object.assign({}, i, e, {
//                           options: Object.assign({}, i.options, e.options),
//                           data: Object.assign({}, i.data, e.data),
//                         })
//                       : e),
//                     t
//                   );
//                 }, {})),
//                 Object.keys(r).map(function (t) {
//                   return r[t];
//                 }))
//               );
//             return (
//               (a.orderedModifiers = c.filter(function (t) {
//                 return t.enabled;
//               })),
//               a.orderedModifiers.forEach(function (t) {
//                 var e = t.name,
//                   i = t.options,
//                   n = void 0 === i ? {} : i,
//                   s = t.effect;
//                 if ("function" == typeof s) {
//                   var o = s({ state: a, name: e, instance: d, options: n });
//                   l.push(o || function () {});
//                 }
//               }),
//               d.update()
//             );
//           },
//           forceUpdate: function () {
//             if (!c) {
//               var t = a.elements,
//                 e = t.reference,
//                 i = t.popper;
//               if (re(e, i)) {
//                 (a.rects = {
//                   reference: se(e, Tt(i), "fixed" === a.options.strategy),
//                   popper: gt(i),
//                 }),
//                   (a.reset = !1),
//                   (a.placement = a.options.placement),
//                   a.orderedModifiers.forEach(function (t) {
//                     return (a.modifiersData[t.name] = Object.assign(
//                       {},
//                       t.data
//                     ));
//                   });
//                 for (var n = 0; n < a.orderedModifiers.length; n++)
//                   if (!0 !== a.reset) {
//                     var s = a.orderedModifiers[n],
//                       o = s.fn,
//                       r = s.options,
//                       l = void 0 === r ? {} : r,
//                       h = s.name;
//                     "function" == typeof o &&
//                       (a =
//                         o({ state: a, options: l, name: h, instance: d }) || a);
//                   } else (a.reset = !1), (n = -1);
//               }
//             }
//           },
//           update:
//             ((s = function () {
//               return new Promise(function (t) {
//                 d.forceUpdate(), t(a);
//               });
//             }),
//             function () {
//               return (
//                 r ||
//                   (r = new Promise(function (t) {
//                     Promise.resolve().then(function () {
//                       (r = void 0), t(s());
//                     });
//                   })),
//                 r
//               );
//             }),
//           destroy: function () {
//             h(), (c = !0);
//           },
//         };
//       if (!re(t, e)) return d;
//       function h() {
//         l.forEach(function (t) {
//           return t();
//         }),
//           (l = []);
//       }
//       return (
//         d.setOptions(i).then(function (t) {
//           !c && i.onFirstUpdate && i.onFirstUpdate(t);
//         }),
//         d
//       );
//     };
//   }
//   var le = ae(),
//     ce = ae({ defaultModifiers: [Mt, ie, jt, ft] }),
//     de = ae({ defaultModifiers: [Mt, ie, jt, ft, ee, Gt, ne, Nt, te] }),
//     he = Object.freeze({
//       __proto__: null,
//       popperGenerator: ae,
//       detectOverflow: Yt,
//       createPopperBase: le,
//       createPopper: de,
//       createPopperLite: ce,
//       top: tt,
//       bottom: et,
//       right: it,
//       left: nt,
//       auto: "auto",
//       basePlacements: st,
//       start: "start",
//       end: "end",
//       clippingParents: "clippingParents",
//       viewport: "viewport",
//       popper: "popper",
//       reference: "reference",
//       variationPlacements: ot,
//       placements: rt,
//       beforeRead: "beforeRead",
//       read: "read",
//       afterRead: "afterRead",
//       beforeMain: "beforeMain",
//       main: "main",
//       afterMain: "afterMain",
//       beforeWrite: "beforeWrite",
//       write: "write",
//       afterWrite: "afterWrite",
//       modifierPhases: at,
//       applyStyles: ft,
//       arrow: Nt,
//       computeStyles: jt,
//       eventListeners: Mt,
//       flip: Gt,
//       hide: te,
//       offset: ee,
//       popperOffsets: ie,
//       preventOverflow: ne,
//     });
//   const ue = new RegExp("ArrowUp|ArrowDown|Escape"),
//     fe = _() ? "top-end" : "top-start",
//     pe = _() ? "top-start" : "top-end",
//     me = _() ? "bottom-end" : "bottom-start",
//     ge = _() ? "bottom-start" : "bottom-end",
//     _e = _() ? "left-start" : "right-start",
//     be = _() ? "right-start" : "left-start",
//     ve = {
//       offset: [0, 2],
//       boundary: "clippingParents",
//       reference: "toggle",
//       display: "dynamic",
//       popperConfig: null,
//       autoClose: !0,
//     },
//     ye = {
//       offset: "(array|string|function)",
//       boundary: "(string|element)",
//       reference: "(string|element|object)",
//       display: "string",
//       popperConfig: "(null|object|function)",
//       autoClose: "(boolean|string)",
//     };
//   class we extends R {
//     constructor(t, e) {
//       super(t),
//         (this._popper = null),
//         (this._config = this._getConfig(e)),
//         (this._menu = this._getMenuElement()),
//         (this._inNavbar = this._detectNavbar()),
//         this._addEventListeners();
//     }
//     static get Default() {
//       return ve;
//     }
//     static get DefaultType() {
//       return ye;
//     }
//     static get NAME() {
//       return "dropdown";
//     }
//     toggle() {
//       u(this._element) ||
//         (this._element.classList.contains("show") ? this.hide() : this.show());
//     }
//     show() {
//       if (u(this._element) || this._menu.classList.contains("show")) return;
//       const t = we.getParentFromElement(this._element),
//         e = { relatedTarget: this._element };
//       if (!H.trigger(this._element, "show.bs.dropdown", e).defaultPrevented) {
//         if (this._inNavbar) U.setDataAttribute(this._menu, "popper", "none");
//         else {
//           if (void 0 === he)
//             throw new TypeError(
//               "Bootstrap's dropdowns require Popper (https://popper.js.org)"
//             );
//           let e = this._element;
//           "parent" === this._config.reference
//             ? (e = t)
//             : a(this._config.reference)
//             ? (e = l(this._config.reference))
//             : "object" == typeof this._config.reference &&
//               (e = this._config.reference);
//           const i = this._getPopperConfig(),
//             n = i.modifiers.find(
//               (t) => "applyStyles" === t.name && !1 === t.enabled
//             );
//           (this._popper = de(e, this._menu, i)),
//             n && U.setDataAttribute(this._menu, "popper", "static");
//         }
//         "ontouchstart" in document.documentElement &&
//           !t.closest(".navbar-nav") &&
//           []
//             .concat(...document.body.children)
//             .forEach((t) => H.on(t, "mouseover", p)),
//           this._element.focus(),
//           this._element.setAttribute("aria-expanded", !0),
//           this._menu.classList.toggle("show"),
//           this._element.classList.toggle("show"),
//           H.trigger(this._element, "shown.bs.dropdown", e);
//       }
//     }
//     hide() {
//       if (u(this._element) || !this._menu.classList.contains("show")) return;
//       const t = { relatedTarget: this._element };
//       this._completeHide(t);
//     }
//     dispose() {
//       this._popper && this._popper.destroy(), super.dispose();
//     }
//     update() {
//       (this._inNavbar = this._detectNavbar()),
//         this._popper && this._popper.update();
//     }
//     _addEventListeners() {
//       H.on(this._element, "click.bs.dropdown", (t) => {
//         t.preventDefault(), this.toggle();
//       });
//     }
//     _completeHide(t) {
//       H.trigger(this._element, "hide.bs.dropdown", t).defaultPrevented ||
//         ("ontouchstart" in document.documentElement &&
//           []
//             .concat(...document.body.children)
//             .forEach((t) => H.off(t, "mouseover", p)),
//         this._popper && this._popper.destroy(),
//         this._menu.classList.remove("show"),
//         this._element.classList.remove("show"),
//         this._element.setAttribute("aria-expanded", "false"),
//         U.removeDataAttribute(this._menu, "popper"),
//         H.trigger(this._element, "hidden.bs.dropdown", t));
//     }
//     _getConfig(t) {
//       if (
//         ((t = {
//           ...this.constructor.Default,
//           ...U.getDataAttributes(this._element),
//           ...t,
//         }),
//         d("dropdown", t, this.constructor.DefaultType),
//         "object" == typeof t.reference &&
//           !a(t.reference) &&
//           "function" != typeof t.reference.getBoundingClientRect)
//       )
//         throw new TypeError(
//           "dropdown".toUpperCase() +
//             ': Option "reference" provided type "object" without a required "getBoundingClientRect" method.'
//         );
//       return t;
//     }
//     _getMenuElement() {
//       return t.next(this._element, ".dropdown-menu")[0];
//     }
//     _getPlacement() {
//       const t = this._element.parentNode;
//       if (t.classList.contains("dropend")) return _e;
//       if (t.classList.contains("dropstart")) return be;
//       const e =
//         "end" ===
//         getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();
//       return t.classList.contains("dropup") ? (e ? pe : fe) : e ? ge : me;
//     }
//     _detectNavbar() {
//       return null !== this._element.closest(".navbar");
//     }
//     _getOffset() {
//       const { offset: t } = this._config;
//       return "string" == typeof t
//         ? t.split(",").map((t) => Number.parseInt(t, 10))
//         : "function" == typeof t
//         ? (e) => t(e, this._element)
//         : t;
//     }
//     _getPopperConfig() {
//       const t = {
//         placement: this._getPlacement(),
//         modifiers: [
//           {
//             name: "preventOverflow",
//             options: { boundary: this._config.boundary },
//           },
//           { name: "offset", options: { offset: this._getOffset() } },
//         ],
//       };
//       return (
//         "static" === this._config.display &&
//           (t.modifiers = [{ name: "applyStyles", enabled: !1 }]),
//         {
//           ...t,
//           ...("function" == typeof this._config.popperConfig
//             ? this._config.popperConfig(t)
//             : this._config.popperConfig),
//         }
//       );
//     }
//     _selectMenuItem(e) {
//       const i = t
//         .find(
//           ".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",
//           this._menu
//         )
//         .filter(h);
//       if (!i.length) return;
//       let n = i.indexOf(e.target);
//       "ArrowUp" === e.key && n > 0 && n--,
//         "ArrowDown" === e.key && n < i.length - 1 && n++,
//         (n = -1 === n ? 0 : n),
//         i[n].focus();
//     }
//     static dropdownInterface(t, e) {
//       let i = w.get(t, "bs.dropdown");
//       if (
//         (i || (i = new we(t, "object" == typeof e ? e : null)),
//         "string" == typeof e)
//       ) {
//         if (void 0 === i[e]) throw new TypeError(`No method named "${e}"`);
//         i[e]();
//       }
//     }
//     static jQueryInterface(t) {
//       return this.each(function () {
//         we.dropdownInterface(this, t);
//       });
//     }
//     static clearMenus(e) {
//       if (e && (2 === e.button || ("keyup" === e.type && "Tab" !== e.key)))
//         return;
//       const i = t.find('[data-bs-toggle="dropdown"]');
//       for (let t = 0, n = i.length; t < n; t++) {
//         const n = w.get(i[t], "bs.dropdown");
//         if (!n || !1 === n._config.autoClose) continue;
//         if (!n._element.classList.contains("show")) continue;
//         const s = { relatedTarget: n._element };
//         if (e) {
//           const t = e.composedPath(),
//             i = t.includes(n._menu);
//           if (
//             t.includes(n._element) ||
//             ("inside" === n._config.autoClose && !i) ||
//             ("outside" === n._config.autoClose && i)
//           )
//             continue;
//           if (
//             n._menu.contains(e.target) &&
//             (("keyup" === e.type && "Tab" === e.key) ||
//               /input|select|option|textarea|form/i.test(e.target.tagName))
//           )
//             continue;
//           "click" === e.type && (s.clickEvent = e);
//         }
//         n._completeHide(s);
//       }
//     }
//     static getParentFromElement(t) {
//       return s(t) || t.parentNode;
//     }
//     static dataApiKeydownHandler(e) {
//       if (
//         /input|textarea/i.test(e.target.tagName)
//           ? "Space" === e.key ||
//             ("Escape" !== e.key &&
//               (("ArrowDown" !== e.key && "ArrowUp" !== e.key) ||
//                 e.target.closest(".dropdown-menu")))
//           : !ue.test(e.key)
//       )
//         return;
//       const i = this.classList.contains("show");
//       if (!i && "Escape" === e.key) return;
//       if ((e.preventDefault(), e.stopPropagation(), u(this))) return;
//       const n = () =>
//         this.matches('[data-bs-toggle="dropdown"]')
//           ? this
//           : t.prev(this, '[data-bs-toggle="dropdown"]')[0];
//       if ("Escape" === e.key) return n().focus(), void we.clearMenus();
//       i || ("ArrowUp" !== e.key && "ArrowDown" !== e.key)
//         ? i && "Space" !== e.key
//           ? we.getInstance(n())._selectMenuItem(e)
//           : we.clearMenus()
//         : n().click();
//     }
//   }
//   H.on(
//     document,
//     "keydown.bs.dropdown.data-api",
//     '[data-bs-toggle="dropdown"]',
//     we.dataApiKeydownHandler
//   ),
//     H.on(
//       document,
//       "keydown.bs.dropdown.data-api",
//       ".dropdown-menu",
//       we.dataApiKeydownHandler
//     ),
//     H.on(document, "click.bs.dropdown.data-api", we.clearMenus),
//     H.on(document, "keyup.bs.dropdown.data-api", we.clearMenus),
//     H.on(
//       document,
//       "click.bs.dropdown.data-api",
//       '[data-bs-toggle="dropdown"]',
//       function (t) {
//         t.preventDefault(), we.dropdownInterface(this);
//       }
//     ),
//     b(we);
//   const Ee = () => {
//       const t = document.documentElement.clientWidth;
//       return Math.abs(window.innerWidth - t);
//     },
//     Te = (t = Ee()) => {
//       Ae(),
//         Le("body", "paddingRight", (e) => e + t),
//         Le(
//           ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",
//           "paddingRight",
//           (e) => e + t
//         ),
//         Le(".sticky-top", "marginRight", (e) => e - t);
//     },
//     Ae = () => {
//       const t = document.body.style.overflow;
//       t && U.setDataAttribute(document.body, "overflow", t),
//         (document.body.style.overflow = "hidden");
//     },
//     Le = (e, i, n) => {
//       const s = Ee();
//       t.find(e).forEach((t) => {
//         if (t !== document.body && window.innerWidth > t.clientWidth + s)
//           return;
//         const e = t.style[i],
//           o = window.getComputedStyle(t)[i];
//         U.setDataAttribute(t, i, e),
//           (t.style[i] = n(Number.parseFloat(o)) + "px");
//       });
//     },
//     Oe = () => {
//       ke("body", "overflow"),
//         ke("body", "paddingRight"),
//         ke(".fixed-top, .fixed-bottom, .is-fixed, .sticky-top", "paddingRight"),
//         ke(".sticky-top", "marginRight");
//     },
//     ke = (e, i) => {
//       t.find(e).forEach((t) => {
//         const e = U.getDataAttribute(t, i);
//         void 0 === e
//           ? t.style.removeProperty(i)
//           : (U.removeDataAttribute(t, i), (t.style[i] = e));
//       });
//     },
//     Ce = {
//       isVisible: !0,
//       isAnimated: !1,
//       rootElement: document.body,
//       clickCallback: null,
//     },
//     xe = {
//       isVisible: "boolean",
//       isAnimated: "boolean",
//       rootElement: "element",
//       clickCallback: "(function|null)",
//     };
//   class De {
//     constructor(t) {
//       (this._config = this._getConfig(t)),
//         (this._isAppended = !1),
//         (this._element = null);
//     }
//     show(t) {
//       this._config.isVisible
//         ? (this._append(),
//           this._config.isAnimated && m(this._getElement()),
//           this._getElement().classList.add("show"),
//           this._emulateAnimation(() => {
//             v(t);
//           }))
//         : v(t);
//     }
//     hide(t) {
//       this._config.isVisible
//         ? (this._getElement().classList.remove("show"),
//           this._emulateAnimation(() => {
//             this.dispose(), v(t);
//           }))
//         : v(t);
//     }
//     _getElement() {
//       if (!this._element) {
//         const t = document.createElement("div");
//         (t.className = "modal-backdroop"),
//           this._config.isAnimated && t.classList.add("fade"),
//           (this._element = t);
//       }
//       return this._element;
//     }
//     _getConfig(t) {
//       return (
//         ((t = { ...Ce, ...("object" == typeof t ? t : {}) }).rootElement =
//           t.rootElement || document.body),
//         d("backdrop", t, xe),
//         t
//       );
//     }
//     _append() {
//       this._isAppended ||
//         (this._config.rootElement.appendChild(this._getElement()),
//         H.on(this._getElement(), "mousedown.bs.backdrop", () => {
//           v(this._config.clickCallback);
//         }),
//         (this._isAppended = !0));
//     }
//     dispose() {
//       this._isAppended &&
//         (H.off(this._element, "mousedown.bs.backdrop"),
//         this._getElement().parentNode.removeChild(this._element),
//         (this._isAppended = !1));
//     }
//     _emulateAnimation(t) {
//       if (!this._config.isAnimated) return void v(t);
//       const e = o(this._getElement());
//       H.one(this._getElement(), "transitionend", () => v(t)),
//         c(this._getElement(), e);
//     }
//   }
//   const Ne = { backdrop: !0, keyboard: !0, focus: !0 },
//     Se = {
//       backdrop: "(boolean|string)",
//       keyboard: "boolean",
//       focus: "boolean",
//     };
//   class Ie extends R {
//     constructor(e, i) {
//       super(e),
//         (this._config = this._getConfig(i)),
//         (this._dialog = t.findOne(".modal-dialog", this._element)),
//         (this._backdrop = this._initializeBackDrop()),
//         (this._isShown = !1),
//         (this._ignoreBackdropClick = !1),
//         (this._isTransitioning = !1);
//     }
//     static get Default() {
//       return Ne;
//     }
//     static get NAME() {
//       return "modal";
//     }
//     toggle(t) {
//       return this._isShown ? this.hide() : this.show(t);
//     }
//     show(t) {
//       if (this._isShown || this._isTransitioning) return;
//       this._isAnimated() && (this._isTransitioning = !0);
//       const e = H.trigger(this._element, "show.bs.modal", { relatedTarget: t });
//       this._isShown ||
//         e.defaultPrevented ||
//         ((this._isShown = !0),
//         Te(),
//         document.body.classList.add("modal-open"),
//         this._adjustDialog(),
//         this._setEscapeEvent(),
//         this._setResizeEvent(),
//         H.on(
//           this._element,
//           "click.dismiss.bs.modal",
//           '[data-bs-dismiss="modal"]',
//           (t) => this.hide(t)
//         ),
//         H.on(this._dialog, "mousedown.dismiss.bs.modal", () => {
//           H.one(this._element, "mouseup.dismiss.bs.modal", (t) => {
//             t.target === this._element && (this._ignoreBackdropClick = !0);
//           });
//         }),
//         this._showBackdrop(() => this._showElement(t)));
//     }
//     hide(t) {
//       if ((t && t.preventDefault(), !this._isShown || this._isTransitioning))
//         return;
//       if (H.trigger(this._element, "hide.bs.modal").defaultPrevented) return;
//       this._isShown = !1;
//       const e = this._isAnimated();
//       e && (this._isTransitioning = !0),
//         this._setEscapeEvent(),
//         this._setResizeEvent(),
//         H.off(document, "focusin.bs.modal"),
//         this._element.classList.remove("show"),
//         H.off(this._element, "click.dismiss.bs.modal"),
//         H.off(this._dialog, "mousedown.dismiss.bs.modal"),
//         this._queueCallback(() => this._hideModal(), this._element, e);
//     }
//     dispose() {
//       [window, this._dialog].forEach((t) => H.off(t, ".bs.modal")),
//         this._backdrop.dispose(),
//         super.dispose(),
//         H.off(document, "focusin.bs.modal");
//     }
//     handleUpdate() {
//       this._adjustDialog();
//     }
//     _initializeBackDrop() {
//       return new De({
//         isVisible: Boolean(this._config.backdrop),
//         isAnimated: this._isAnimated(),
//       });
//     }
//     _getConfig(t) {
//       return (
//         (t = { ...Ne, ...U.getDataAttributes(this._element), ...t }),
//         d("modal", t, Se),
//         t
//       );
//     }
//     _showElement(e) {
//       const i = this._isAnimated(),
//         n = t.findOne(".modal-body", this._dialog);
//       (this._element.parentNode &&
//         this._element.parentNode.nodeType === Node.ELEMENT_NODE) ||
//         document.body.appendChild(this._element),
//         (this._element.style.display = "block"),
//         this._element.removeAttribute("aria-hidden"),
//         this._element.setAttribute("aria-modal", !0),
//         this._element.setAttribute("role", "dialog"),
//         (this._element.scrollTop = 0),
//         n && (n.scrollTop = 0),
//         i && m(this._element),
//         this._element.classList.add("show"),
//         this._config.focus && this._enforceFocus(),
//         this._queueCallback(
//           () => {
//             this._config.focus && this._element.focus(),
//               (this._isTransitioning = !1),
//               H.trigger(this._element, "shown.bs.modal", { relatedTarget: e });
//           },
//           this._dialog,
//           i
//         );
//     }
//     _enforceFocus() {
//       H.off(document, "focusin.bs.modal"),
//         H.on(document, "focusin.bs.modal", (t) => {
//           document === t.target ||
//             this._element === t.target ||
//             this._element.contains(t.target) ||
//             this._element.focus();
//         });
//     }
//     _setEscapeEvent() {
//       this._isShown
//         ? H.on(this._element, "keydown.dismiss.bs.modal", (t) => {
//             this._config.keyboard && "Escape" === t.key
//               ? (t.preventDefault(), this.hide())
//               : this._config.keyboard ||
//                 "Escape" !== t.key ||
//                 this._triggerBackdropTransition();
//           })
//         : H.off(this._element, "keydown.dismiss.bs.modal");
//     }
//     _setResizeEvent() {
//       this._isShown
//         ? H.on(window, "resize.bs.modal", () => this._adjustDialog())
//         : H.off(window, "resize.bs.modal");
//     }
//     _hideModal() {
//       (this._element.style.display = "none"),
//         this._element.setAttribute("aria-hidden", !0),
//         this._element.removeAttribute("aria-modal"),
//         this._element.removeAttribute("role"),
//         (this._isTransitioning = !1),
//         this._backdrop.hide(() => {
//           document.body.classList.remove("modal-open"),
//             this._resetAdjustments(),
//             Oe(),
//             H.trigger(this._element, "hidden.bs.modal");
//         });
//     }
//     _showBackdrop(t) {
//       H.on(this._element, "click.dismiss.bs.modal", (t) => {
//         this._ignoreBackdropClick
//           ? (this._ignoreBackdropClick = !1)
//           : t.target === t.currentTarget &&
//             (!0 === this._config.backdrop
//               ? this.hide()
//               : "static" === this._config.backdrop &&
//                 this._triggerBackdropTransition());
//       }),
//         this._backdrop.show(t);
//     }
//     _isAnimated() {
//       return this._element.classList.contains("fade");
//     }
//     _triggerBackdropTransition() {
//       if (H.trigger(this._element, "hidePrevented.bs.modal").defaultPrevented)
//         return;
//       const t =
//         this._element.scrollHeight > document.documentElement.clientHeight;
//       t || (this._element.style.overflowY = "hidden"),
//         this._element.classList.add("modal-static");
//       const e = o(this._dialog);
//       H.off(this._element, "transitionend"),
//         H.one(this._element, "transitionend", () => {
//           this._element.classList.remove("modal-static"),
//             t ||
//               (H.one(this._element, "transitionend", () => {
//                 this._element.style.overflowY = "";
//               }),
//               c(this._element, e));
//         }),
//         c(this._element, e),
//         this._element.focus();
//     }
//     _adjustDialog() {
//       const t =
//           this._element.scrollHeight > document.documentElement.clientHeight,
//         e = Ee(),
//         i = e > 0;
//       ((!i && t && !_()) || (i && !t && _())) &&
//         (this._element.style.paddingLeft = e + "px"),
//         ((i && !t && !_()) || (!i && t && _())) &&
//           (this._element.style.paddingRight = e + "px");
//     }
//     _resetAdjustments() {
//       (this._element.style.paddingLeft = ""),
//         (this._element.style.paddingRight = "");
//     }
//     static jQueryInterface(t, e) {
//       return this.each(function () {
//         const i =
//           Ie.getInstance(this) || new Ie(this, "object" == typeof t ? t : {});
//         if ("string" == typeof t) {
//           if (void 0 === i[t]) throw new TypeError(`No method named "${t}"`);
//           i[t](e);
//         }
//       });
//     }
//   }
//   H.on(
//     document,
//     "click.bs.modal.data-api",
//     '[data-bs-toggle="modal"]',
//     function (t) {
//       const e = s(this);
//       ["A", "AREA"].includes(this.tagName) && t.preventDefault(),
//         H.one(e, "show.bs.modal", (t) => {
//           t.defaultPrevented ||
//             H.one(e, "hidden.bs.modal", () => {
//               h(this) && this.focus();
//             });
//         }),
//         (Ie.getInstance(e) || new Ie(e)).toggle(this);
//     }
//   ),
//     b(Ie);
//   const je = { backdrop: !0, keyboard: !0, scroll: !1 },
//     Pe = { backdrop: "boolean", keyboard: "boolean", scroll: "boolean" };
//   class Me extends R {
//     constructor(t, e) {
//       super(t),
//         (this._config = this._getConfig(e)),
//         (this._isShown = !1),
//         (this._backdrop = this._initializeBackDrop()),
//         this._addEventListeners();
//     }
//     static get NAME() {
//       return "offcanvas";
//     }
//     static get Default() {
//       return je;
//     }
//     toggle(t) {
//       return this._isShown ? this.hide() : this.show(t);
//     }
//     show(t) {
//       this._isShown ||
//         H.trigger(this._element, "show.bs.offcanvas", { relatedTarget: t })
//           .defaultPrevented ||
//         ((this._isShown = !0),
//         (this._element.style.visibility = "visible"),
//         this._backdrop.show(),
//         this._config.scroll ||
//           (Te(), this._enforceFocusOnElement(this._element)),
//         this._element.removeAttribute("aria-hidden"),
//         this._element.setAttribute("aria-modal", !0),
//         this._element.setAttribute("role", "dialog"),
//         this._element.classList.add("show"),
//         this._queueCallback(
//           () => {
//             H.trigger(this._element, "shown.bs.offcanvas", {
//               relatedTarget: t,
//             });
//           },
//           this._element,
//           !0
//         ));
//     }
//     hide() {
//       this._isShown &&
//         (H.trigger(this._element, "hide.bs.offcanvas").defaultPrevented ||
//           (H.off(document, "focusin.bs.offcanvas"),
//           this._element.blur(),
//           (this._isShown = !1),
//           this._element.classList.remove("show"),
//           this._backdrop.hide(),
//           this._queueCallback(
//             () => {
//               this._element.setAttribute("aria-hidden", !0),
//                 this._element.removeAttribute("aria-modal"),
//                 this._element.removeAttribute("role"),
//                 (this._element.style.visibility = "hidden"),
//                 this._config.scroll || Oe(),
//                 H.trigger(this._element, "hidden.bs.offcanvas");
//             },
//             this._element,
//             !0
//           )));
//     }
//     dispose() {
//       this._backdrop.dispose(),
//         super.dispose(),
//         H.off(document, "focusin.bs.offcanvas");
//     }
//     _getConfig(t) {
//       return (
//         (t = {
//           ...je,
//           ...U.getDataAttributes(this._element),
//           ...("object" == typeof t ? t : {}),
//         }),
//         d("offcanvas", t, Pe),
//         t
//       );
//     }
//     _initializeBackDrop() {
//       return new De({
//         isVisible: this._config.backdrop,
//         isAnimated: !0,
//         rootElement: this._element.parentNode,
//         clickCallback: () => this.hide(),
//       });
//     }
//     _enforceFocusOnElement(t) {
//       H.off(document, "focusin.bs.offcanvas"),
//         H.on(document, "focusin.bs.offcanvas", (e) => {
//           document === e.target ||
//             t === e.target ||
//             t.contains(e.target) ||
//             t.focus();
//         }),
//         t.focus();
//     }
//     _addEventListeners() {
//       H.on(
//         this._element,
//         "click.dismiss.bs.offcanvas",
//         '[data-bs-dismiss="offcanvas"]',
//         () => this.hide()
//       ),
//         H.on(this._element, "keydown.dismiss.bs.offcanvas", (t) => {
//           this._config.keyboard && "Escape" === t.key && this.hide();
//         });
//     }
//     static jQueryInterface(t) {
//       return this.each(function () {
//         const e =
//           w.get(this, "bs.offcanvas") ||
//           new Me(this, "object" == typeof t ? t : {});
//         if ("string" == typeof t) {
//           if (void 0 === e[t] || t.startsWith("_") || "constructor" === t)
//             throw new TypeError(`No method named "${t}"`);
//           e[t](this);
//         }
//       });
//     }
//   }
//   H.on(
//     document,
//     "click.bs.offcanvas.data-api",
//     '[data-bs-toggle="offcanvas"]',
//     function (e) {
//       const i = s(this);
//       if ((["A", "AREA"].includes(this.tagName) && e.preventDefault(), u(this)))
//         return;
//       H.one(i, "hidden.bs.offcanvas", () => {
//         h(this) && this.focus();
//       });
//       const n = t.findOne(".offcanvas.show");
//       n && n !== i && Me.getInstance(n).hide(),
//         (w.get(i, "bs.offcanvas") || new Me(i)).toggle(this);
//     }
//   ),
//     H.on(window, "load.bs.offcanvas.data-api", () => {
//       t.find(".offcanvas.show").forEach((t) =>
//         (w.get(t, "bs.offcanvas") || new Me(t)).show()
//       );
//     }),
//     b(Me);
//   const He = new Set([
//       "background",
//       "cite",
//       "href",
//       "itemtype",
//       "longdesc",
//       "poster",
//       "src",
//       "xlink:href",
//     ]),
//     Re = /^(?:(?:https?|mailto|ftp|tel|file):|[^#&/:?]*(?:[#/?]|$))/i,
//     Be =
//       /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i,
//     We = (t, e) => {
//       const i = t.nodeName.toLowerCase();
//       if (e.includes(i))
//         return (
//           !He.has(i) || Boolean(Re.test(t.nodeValue) || Be.test(t.nodeValue))
//         );
//       const n = e.filter((t) => t instanceof RegExp);
//       for (let t = 0, e = n.length; t < e; t++) if (n[t].test(i)) return !0;
//       return !1;
//     };
//   function qe(t, e, i) {
//     if (!t.length) return t;
//     if (i && "function" == typeof i) return i(t);
//     const n = new window.DOMParser().parseFromString(t, "text/html"),
//       s = Object.keys(e),
//       o = [].concat(...n.body.querySelectorAll("*"));
//     for (let t = 0, i = o.length; t < i; t++) {
//       const i = o[t],
//         n = i.nodeName.toLowerCase();
//       if (!s.includes(n)) {
//         i.parentNode.removeChild(i);
//         continue;
//       }
//       const r = [].concat(...i.attributes),
//         a = [].concat(e["*"] || [], e[n] || []);
//       r.forEach((t) => {
//         We(t, a) || i.removeAttribute(t.nodeName);
//       });
//     }
//     return n.body.innerHTML;
//   }
//   const ze = new RegExp("(^|\\s)bs-tooltip\\S+", "g"),
//     Ue = new Set(["sanitize", "allowList", "sanitizeFn"]),
//     $e = {
//       animation: "boolean",
//       template: "string",
//       title: "(string|element|function)",
//       trigger: "string",
//       delay: "(number|object)",
//       html: "boolean",
//       selector: "(string|boolean)",
//       placement: "(string|function)",
//       offset: "(array|string|function)",
//       container: "(string|element|boolean)",
//       fallbackPlacements: "array",
//       boundary: "(string|element)",
//       customClass: "(string|function)",
//       sanitize: "boolean",
//       sanitizeFn: "(null|function)",
//       allowList: "object",
//       popperConfig: "(null|object|function)",
//     },
//     Fe = {
//       AUTO: "auto",
//       TOP: "top",
//       RIGHT: _() ? "left" : "right",
//       BOTTOM: "bottom",
//       LEFT: _() ? "right" : "left",
//     },
//     Ve = {
//       animation: !0,
//       template:
//         '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
//       trigger: "hover focus",
//       title: "",
//       delay: 0,
//       html: !1,
//       selector: !1,
//       placement: "top",
//       offset: [0, 0],
//       container: !1,
//       fallbackPlacements: ["top", "right", "bottom", "left"],
//       boundary: "clippingParents",
//       customClass: "",
//       sanitize: !0,
//       sanitizeFn: null,
//       allowList: {
//         "*": ["class", "dir", "id", "lang", "role", /^aria-[\w-]*$/i],
//         a: ["target", "href", "title", "rel"],
//         area: [],
//         b: [],
//         br: [],
//         col: [],
//         code: [],
//         div: [],
//         em: [],
//         hr: [],
//         h1: [],
//         h2: [],
//         h3: [],
//         h4: [],
//         h5: [],
//         h6: [],
//         i: [],
//         img: ["src", "srcset", "alt", "title", "width", "height"],
//         li: [],
//         ol: [],
//         p: [],
//         pre: [],
//         s: [],
//         small: [],
//         span: [],
//         sub: [],
//         sup: [],
//         strong: [],
//         u: [],
//         ul: [],
//       },
//       popperConfig: null,
//     },
//     Ke = {
//       HIDE: "hide.bs.tooltip",
//       HIDDEN: "hidden.bs.tooltip",
//       SHOW: "show.bs.tooltip",
//       SHOWN: "shown.bs.tooltip",
//       INSERTED: "inserted.bs.tooltip",
//       CLICK: "click.bs.tooltip",
//       FOCUSIN: "focusin.bs.tooltip",
//       FOCUSOUT: "focusout.bs.tooltip",
//       MOUSEENTER: "mouseenter.bs.tooltip",
//       MOUSELEAVE: "mouseleave.bs.tooltip",
//     };
//   class Xe extends R {
//     constructor(t, e) {
//       if (void 0 === he)
//         throw new TypeError(
//           "Bootstrap's tooltips require Popper (https://popper.js.org)"
//         );
//       super(t),
//         (this._isEnabled = !0),
//         (this._timeout = 0),
//         (this._hoverState = ""),
//         (this._activeTrigger = {}),
//         (this._popper = null),
//         (this._config = this._getConfig(e)),
//         (this.tip = null),
//         this._setListeners();
//     }
//     static get Default() {
//       return Ve;
//     }
//     static get NAME() {
//       return "tooltip";
//     }
//     static get Event() {
//       return Ke;
//     }
//     static get DefaultType() {
//       return $e;
//     }
//     enable() {
//       this._isEnabled = !0;
//     }
//     disable() {
//       this._isEnabled = !1;
//     }
//     toggleEnabled() {
//       this._isEnabled = !this._isEnabled;
//     }
//     toggle(t) {
//       if (this._isEnabled)
//         if (t) {
//           const e = this._initializeOnDelegatedTarget(t);
//           (e._activeTrigger.click = !e._activeTrigger.click),
//             e._isWithActiveTrigger() ? e._enter(null, e) : e._leave(null, e);
//         } else {
//           if (this.getTipElement().classList.contains("show"))
//             return void this._leave(null, this);
//           this._enter(null, this);
//         }
//     }
//     dispose() {
//       clearTimeout(this._timeout),
//         H.off(
//           this._element.closest(".modal"),
//           "hide.bs.modal",
//           this._hideModalHandler
//         ),
//         this.tip &&
//           this.tip.parentNode &&
//           this.tip.parentNode.removeChild(this.tip),
//         this._popper && this._popper.destroy(),
//         super.dispose();
//     }
//     show() {
//       if ("none" === this._element.style.display)
//         throw new Error("Please use show on visible elements");
//       if (!this.isWithContent() || !this._isEnabled) return;
//       const t = H.trigger(this._element, this.constructor.Event.SHOW),
//         i = f(this._element),
//         n =
//           null === i
//             ? this._element.ownerDocument.documentElement.contains(
//                 this._element
//               )
//             : i.contains(this._element);
//       if (t.defaultPrevented || !n) return;
//       const s = this.getTipElement(),
//         o = e(this.constructor.NAME);
//       s.setAttribute("id", o),
//         this._element.setAttribute("aria-describedby", o),
//         this.setContent(),
//         this._config.animation && s.classList.add("fade");
//       const r =
//           "function" == typeof this._config.placement
//             ? this._config.placement.call(this, s, this._element)
//             : this._config.placement,
//         a = this._getAttachment(r);
//       this._addAttachmentClass(a);
//       const { container: l } = this._config;
//       w.set(s, this.constructor.DATA_KEY, this),
//         this._element.ownerDocument.documentElement.contains(this.tip) ||
//           (l.appendChild(s),
//           H.trigger(this._element, this.constructor.Event.INSERTED)),
//         this._popper
//           ? this._popper.update()
//           : (this._popper = de(this._element, s, this._getPopperConfig(a))),
//         s.classList.add("show");
//       const c =
//         "function" == typeof this._config.customClass
//           ? this._config.customClass()
//           : this._config.customClass;
//       c && s.classList.add(...c.split(" ")),
//         "ontouchstart" in document.documentElement &&
//           [].concat(...document.body.children).forEach((t) => {
//             H.on(t, "mouseover", p);
//           });
//       const d = this.tip.classList.contains("fade");
//       this._queueCallback(
//         () => {
//           const t = this._hoverState;
//           (this._hoverState = null),
//             H.trigger(this._element, this.constructor.Event.SHOWN),
//             "out" === t && this._leave(null, this);
//         },
//         this.tip,
//         d
//       );
//     }
//     hide() {
//       if (!this._popper) return;
//       const t = this.getTipElement();
//       if (
//         H.trigger(this._element, this.constructor.Event.HIDE).defaultPrevented
//       )
//         return;
//       t.classList.remove("show"),
//         "ontouchstart" in document.documentElement &&
//           []
//             .concat(...document.body.children)
//             .forEach((t) => H.off(t, "mouseover", p)),
//         (this._activeTrigger.click = !1),
//         (this._activeTrigger.focus = !1),
//         (this._activeTrigger.hover = !1);
//       const e = this.tip.classList.contains("fade");
//       this._queueCallback(
//         () => {
//           this._isWithActiveTrigger() ||
//             ("show" !== this._hoverState &&
//               t.parentNode &&
//               t.parentNode.removeChild(t),
//             this._cleanTipClass(),
//             this._element.removeAttribute("aria-describedby"),
//             H.trigger(this._element, this.constructor.Event.HIDDEN),
//             this._popper && (this._popper.destroy(), (this._popper = null)));
//         },
//         this.tip,
//         e
//       ),
//         (this._hoverState = "");
//     }
//     update() {
//       null !== this._popper && this._popper.update();
//     }
//     isWithContent() {
//       return Boolean(this.getTitle());
//     }
//     getTipElement() {
//       if (this.tip) return this.tip;
//       const t = document.createElement("div");
//       return (
//         (t.innerHTML = this._config.template),
//         (this.tip = t.children[0]),
//         this.tip
//       );
//     }
//     setContent() {
//       const e = this.getTipElement();
//       this.setElementContent(t.findOne(".tooltip-inner", e), this.getTitle()),
//         e.classList.remove("fade", "show");
//     }
//     setElementContent(t, e) {
//       if (null !== t)
//         return a(e)
//           ? ((e = l(e)),
//             void (this._config.html
//               ? e.parentNode !== t && ((t.innerHTML = ""), t.appendChild(e))
//               : (t.textContent = e.textContent)))
//           : void (this._config.html
//               ? (this._config.sanitize &&
//                   (e = qe(e, this._config.allowList, this._config.sanitizeFn)),
//                 (t.innerHTML = e))
//               : (t.textContent = e));
//     }
//     getTitle() {
//       let t = this._element.getAttribute("data-bs-original-title");
//       return (
//         t ||
//           (t =
//             "function" == typeof this._config.title
//               ? this._config.title.call(this._element)
//               : this._config.title),
//         t
//       );
//     }
//     updateAttachment(t) {
//       return "right" === t ? "end" : "left" === t ? "start" : t;
//     }
//     _initializeOnDelegatedTarget(t, e) {
//       const i = this.constructor.DATA_KEY;
//       return (
//         (e = e || w.get(t.delegateTarget, i)) ||
//           ((e = new this.constructor(
//             t.delegateTarget,
//             this._getDelegateConfig()
//           )),
//           w.set(t.delegateTarget, i, e)),
//         e
//       );
//     }
//     _getOffset() {
//       const { offset: t } = this._config;
//       return "string" == typeof t
//         ? t.split(",").map((t) => Number.parseInt(t, 10))
//         : "function" == typeof t
//         ? (e) => t(e, this._element)
//         : t;
//     }
//     _getPopperConfig(t) {
//       const e = {
//         placement: t,
//         modifiers: [
//           {
//             name: "flip",
//             options: { fallbackPlacements: this._config.fallbackPlacements },
//           },
//           { name: "offset", options: { offset: this._getOffset() } },
//           {
//             name: "preventOverflow",
//             options: { boundary: this._config.boundary },
//           },
//           {
//             name: "arrow",
//             options: { element: `.${this.constructor.NAME}-arrow` },
//           },
//           {
//             name: "onChange",
//             enabled: !0,
//             phase: "afterWrite",
//             fn: (t) => this._handlePopperPlacementChange(t),
//           },
//         ],
//         onFirstUpdate: (t) => {
//           t.options.placement !== t.placement &&
//             this._handlePopperPlacementChange(t);
//         },
//       };
//       return {
//         ...e,
//         ...("function" == typeof this._config.popperConfig
//           ? this._config.popperConfig(e)
//           : this._config.popperConfig),
//       };
//     }
//     _addAttachmentClass(t) {
//       this.getTipElement().classList.add(
//         "bs-tooltip-" + this.updateAttachment(t)
//       );
//     }
//     _getAttachment(t) {
//       return Fe[t.toUpperCase()];
//     }
//     _setListeners() {
//       this._config.trigger.split(" ").forEach((t) => {
//         if ("click" === t)
//           H.on(
//             this._element,
//             this.constructor.Event.CLICK,
//             this._config.selector,
//             (t) => this.toggle(t)
//           );
//         else if ("manual" !== t) {
//           const e =
//               "hover" === t
//                 ? this.constructor.Event.MOUSEENTER
//                 : this.constructor.Event.FOCUSIN,
//             i =
//               "hover" === t
//                 ? this.constructor.Event.MOUSELEAVE
//                 : this.constructor.Event.FOCUSOUT;
//           H.on(this._element, e, this._config.selector, (t) => this._enter(t)),
//             H.on(this._element, i, this._config.selector, (t) =>
//               this._leave(t)
//             );
//         }
//       }),
//         (this._hideModalHandler = () => {
//           this._element && this.hide();
//         }),
//         H.on(
//           this._element.closest(".modal"),
//           "hide.bs.modal",
//           this._hideModalHandler
//         ),
//         this._config.selector
//           ? (this._config = {
//               ...this._config,
//               trigger: "manual",
//               selector: "",
//             })
//           : this._fixTitle();
//     }
//     _fixTitle() {
//       const t = this._element.getAttribute("title"),
//         e = typeof this._element.getAttribute("data-bs-original-title");
//       (t || "string" !== e) &&
//         (this._element.setAttribute("data-bs-original-title", t || ""),
//         !t ||
//           this._element.getAttribute("aria-label") ||
//           this._element.textContent ||
//           this._element.setAttribute("aria-label", t),
//         this._element.setAttribute("title", ""));
//     }
//     _enter(t, e) {
//       (e = this._initializeOnDelegatedTarget(t, e)),
//         t && (e._activeTrigger["focusin" === t.type ? "focus" : "hover"] = !0),
//         e.getTipElement().classList.contains("show") || "show" === e._hoverState
//           ? (e._hoverState = "show")
//           : (clearTimeout(e._timeout),
//             (e._hoverState = "show"),
//             e._config.delay && e._config.delay.show
//               ? (e._timeout = setTimeout(() => {
//                   "show" === e._hoverState && e.show();
//                 }, e._config.delay.show))
//               : e.show());
//     }
//     _leave(t, e) {
//       (e = this._initializeOnDelegatedTarget(t, e)),
//         t &&
//           (e._activeTrigger["focusout" === t.type ? "focus" : "hover"] =
//             e._element.contains(t.relatedTarget)),
//         e._isWithActiveTrigger() ||
//           (clearTimeout(e._timeout),
//           (e._hoverState = "out"),
//           e._config.delay && e._config.delay.hide
//             ? (e._timeout = setTimeout(() => {
//                 "out" === e._hoverState && e.hide();
//               }, e._config.delay.hide))
//             : e.hide());
//     }
//     _isWithActiveTrigger() {
//       for (const t in this._activeTrigger)
//         if (this._activeTrigger[t]) return !0;
//       return !1;
//     }
//     _getConfig(t) {
//       const e = U.getDataAttributes(this._element);
//       return (
//         Object.keys(e).forEach((t) => {
//           Ue.has(t) && delete e[t];
//         }),
//         ((t = {
//           ...this.constructor.Default,
//           ...e,
//           ...("object" == typeof t && t ? t : {}),
//         }).container = !1 === t.container ? document.body : l(t.container)),
//         "number" == typeof t.delay &&
//           (t.delay = { show: t.delay, hide: t.delay }),
//         "number" == typeof t.title && (t.title = t.title.toString()),
//         "number" == typeof t.content && (t.content = t.content.toString()),
//         d("tooltip", t, this.constructor.DefaultType),
//         t.sanitize && (t.template = qe(t.template, t.allowList, t.sanitizeFn)),
//         t
//       );
//     }
//     _getDelegateConfig() {
//       const t = {};
//       if (this._config)
//         for (const e in this._config)
//           this.constructor.Default[e] !== this._config[e] &&
//             (t[e] = this._config[e]);
//       return t;
//     }
//     _cleanTipClass() {
//       const t = this.getTipElement(),
//         e = t.getAttribute("class").match(ze);
//       null !== e &&
//         e.length > 0 &&
//         e.map((t) => t.trim()).forEach((e) => t.classList.remove(e));
//     }
//     _handlePopperPlacementChange(t) {
//       const { state: e } = t;
//       e &&
//         ((this.tip = e.elements.popper),
//         this._cleanTipClass(),
//         this._addAttachmentClass(this._getAttachment(e.placement)));
//     }
//     static jQueryInterface(t) {
//       return this.each(function () {
//         let e = w.get(this, "bs.tooltip");
//         const i = "object" == typeof t && t;
//         if (
//           (e || !/dispose|hide/.test(t)) &&
//           (e || (e = new Xe(this, i)), "string" == typeof t)
//         ) {
//           if (void 0 === e[t]) throw new TypeError(`No method named "${t}"`);
//           e[t]();
//         }
//       });
//     }
//   }
//   b(Xe);
//   const Ye = new RegExp("(^|\\s)bs-popover\\S+", "g"),
//     Qe = {
//       ...Xe.Default,
//       placement: "right",
//       offset: [0, 8],
//       trigger: "click",
//       content: "",
//       template:
//         '<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',
//     },
//     Ge = { ...Xe.DefaultType, content: "(string|element|function)" },
//     Ze = {
//       HIDE: "hide.bs.popover",
//       HIDDEN: "hidden.bs.popover",
//       SHOW: "show.bs.popover",
//       SHOWN: "shown.bs.popover",
//       INSERTED: "inserted.bs.popover",
//       CLICK: "click.bs.popover",
//       FOCUSIN: "focusin.bs.popover",
//       FOCUSOUT: "focusout.bs.popover",
//       MOUSEENTER: "mouseenter.bs.popover",
//       MOUSELEAVE: "mouseleave.bs.popover",
//     };
//   class Je extends Xe {
//     static get Default() {
//       return Qe;
//     }
//     static get NAME() {
//       return "popover";
//     }
//     static get Event() {
//       return Ze;
//     }
//     static get DefaultType() {
//       return Ge;
//     }
//     isWithContent() {
//       return this.getTitle() || this._getContent();
//     }
//     setContent() {
//       const e = this.getTipElement();
//       this.setElementContent(t.findOne(".popover-header", e), this.getTitle());
//       let i = this._getContent();
//       "function" == typeof i && (i = i.call(this._element)),
//         this.setElementContent(t.findOne(".popover-body", e), i),
//         e.classList.remove("fade", "show");
//     }
//     _addAttachmentClass(t) {
//       this.getTipElement().classList.add(
//         "bs-popover-" + this.updateAttachment(t)
//       );
//     }
//     _getContent() {
//       return (
//         this._element.getAttribute("data-bs-content") || this._config.content
//       );
//     }
//     _cleanTipClass() {
//       const t = this.getTipElement(),
//         e = t.getAttribute("class").match(Ye);
//       null !== e &&
//         e.length > 0 &&
//         e.map((t) => t.trim()).forEach((e) => t.classList.remove(e));
//     }
//     static jQueryInterface(t) {
//       return this.each(function () {
//         let e = w.get(this, "bs.popover");
//         const i = "object" == typeof t ? t : null;
//         if (
//           (e || !/dispose|hide/.test(t)) &&
//           (e || ((e = new Je(this, i)), w.set(this, "bs.popover", e)),
//           "string" == typeof t)
//         ) {
//           if (void 0 === e[t]) throw new TypeError(`No method named "${t}"`);
//           e[t]();
//         }
//       });
//     }
//   }
//   b(Je);
//   const ti = { offset: 10, method: "auto", target: "" },
//     ei = { offset: "number", method: "string", target: "(string|element)" };
//   class ii extends R {
//     constructor(t, e) {
//       super(t),
//         (this._scrollElement =
//           "BODY" === this._element.tagName ? window : this._element),
//         (this._config = this._getConfig(e)),
//         (this._selector = `${this._config.target} .nav-link, ${this._config.target} .list-group-item, ${this._config.target} .dropdown-item`),
//         (this._offsets = []),
//         (this._targets = []),
//         (this._activeTarget = null),
//         (this._scrollHeight = 0),
//         H.on(this._scrollElement, "scroll.bs.scrollspy", () => this._process()),
//         this.refresh(),
//         this._process();
//     }
//     static get Default() {
//       return ti;
//     }
//     static get NAME() {
//       return "scrollspy";
//     }
//     refresh() {
//       const e =
//           this._scrollElement === this._scrollElement.window
//             ? "offset"
//             : "position",
//         i = "auto" === this._config.method ? e : this._config.method,
//         s = "position" === i ? this._getScrollTop() : 0;
//       (this._offsets = []),
//         (this._targets = []),
//         (this._scrollHeight = this._getScrollHeight()),
//         t
//           .find(this._selector)
//           .map((e) => {
//             const o = n(e),
//               r = o ? t.findOne(o) : null;
//             if (r) {
//               const t = r.getBoundingClientRect();
//               if (t.width || t.height) return [U[i](r).top + s, o];
//             }
//             return null;
//           })
//           .filter((t) => t)
//           .sort((t, e) => t[0] - e[0])
//           .forEach((t) => {
//             this._offsets.push(t[0]), this._targets.push(t[1]);
//           });
//     }
//     dispose() {
//       H.off(this._scrollElement, ".bs.scrollspy"), super.dispose();
//     }
//     _getConfig(t) {
//       if (
//         "string" !=
//           typeof (t = {
//             ...ti,
//             ...U.getDataAttributes(this._element),
//             ...("object" == typeof t && t ? t : {}),
//           }).target &&
//         a(t.target)
//       ) {
//         let { id: i } = t.target;
//         i || ((i = e("scrollspy")), (t.target.id = i)), (t.target = "#" + i);
//       }
//       return d("scrollspy", t, ei), t;
//     }
//     _getScrollTop() {
//       return this._scrollElement === window
//         ? this._scrollElement.pageYOffset
//         : this._scrollElement.scrollTop;
//     }
//     _getScrollHeight() {
//       return (
//         this._scrollElement.scrollHeight ||
//         Math.max(
//           document.body.scrollHeight,
//           document.documentElement.scrollHeight
//         )
//       );
//     }
//     _getOffsetHeight() {
//       return this._scrollElement === window
//         ? window.innerHeight
//         : this._scrollElement.getBoundingClientRect().height;
//     }
//     _process() {
//       const t = this._getScrollTop() + this._config.offset,
//         e = this._getScrollHeight(),
//         i = this._config.offset + e - this._getOffsetHeight();
//       if ((this._scrollHeight !== e && this.refresh(), t >= i)) {
//         const t = this._targets[this._targets.length - 1];
//         this._activeTarget !== t && this._activate(t);
//       } else {
//         if (this._activeTarget && t < this._offsets[0] && this._offsets[0] > 0)
//           return (this._activeTarget = null), void this._clear();
//         for (let e = this._offsets.length; e--; )
//           this._activeTarget !== this._targets[e] &&
//             t >= this._offsets[e] &&
//             (void 0 === this._offsets[e + 1] || t < this._offsets[e + 1]) &&
//             this._activate(this._targets[e]);
//       }
//     }
//     _activate(e) {
//       (this._activeTarget = e), this._clear();
//       const i = this._selector
//           .split(",")
//           .map((t) => `${t}[data-bs-target="${e}"],${t}[href="${e}"]`),
//         n = t.findOne(i.join(","));
//       n.classList.contains("dropdown-item")
//         ? (t
//             .findOne(".dropdown-toggle", n.closest(".dropdown"))
//             .classList.add("active"),
//           n.classList.add("active"))
//         : (n.classList.add("active"),
//           t.parents(n, ".nav, .list-group").forEach((e) => {
//             t
//               .prev(e, ".nav-link, .list-group-item")
//               .forEach((t) => t.classList.add("active")),
//               t.prev(e, ".nav-item").forEach((e) => {
//                 t.children(e, ".nav-link").forEach((t) =>
//                   t.classList.add("active")
//                 );
//               });
//           })),
//         H.trigger(this._scrollElement, "activate.bs.scrollspy", {
//           relatedTarget: e,
//         });
//     }
//     _clear() {
//       t.find(this._selector)
//         .filter((t) => t.classList.contains("active"))
//         .forEach((t) => t.classList.remove("active"));
//     }
//     static jQueryInterface(t) {
//       return this.each(function () {
//         const e =
//           ii.getInstance(this) || new ii(this, "object" == typeof t ? t : {});
//         if ("string" == typeof t) {
//           if (void 0 === e[t]) throw new TypeError(`No method named "${t}"`);
//           e[t]();
//         }
//       });
//     }
//   }
//   H.on(window, "load.bs.scrollspy.data-api", () => {
//     t.find('[data-bs-spy="scroll"]').forEach((t) => new ii(t));
//   }),
//     b(ii);
//   class ni extends R {
//     static get NAME() {
//       return "tab";
//     }
//     show() {
//       if (
//         this._element.parentNode &&
//         this._element.parentNode.nodeType === Node.ELEMENT_NODE &&
//         this._element.classList.contains("active")
//       )
//         return;
//       let e;
//       const i = s(this._element),
//         n = this._element.closest(".nav, .list-group");
//       if (n) {
//         const i =
//           "UL" === n.nodeName || "OL" === n.nodeName
//             ? ":scope > li > .active"
//             : ".active";
//         (e = t.find(i, n)), (e = e[e.length - 1]);
//       }
//       const o = e
//         ? H.trigger(e, "hide.bs.tab", { relatedTarget: this._element })
//         : null;
//       if (
//         H.trigger(this._element, "show.bs.tab", { relatedTarget: e })
//           .defaultPrevented ||
//         (null !== o && o.defaultPrevented)
//       )
//         return;
//       this._activate(this._element, n);
//       const r = () => {
//         H.trigger(e, "hidden.bs.tab", { relatedTarget: this._element }),
//           H.trigger(this._element, "shown.bs.tab", { relatedTarget: e });
//       };
//       i ? this._activate(i, i.parentNode, r) : r();
//     }
//     _activate(e, i, n) {
//       const s = (
//           !i || ("UL" !== i.nodeName && "OL" !== i.nodeName)
//             ? t.children(i, ".active")
//             : t.find(":scope > li > .active", i)
//         )[0],
//         o = n && s && s.classList.contains("fade"),
//         r = () => this._transitionComplete(e, s, n);
//       s && o
//         ? (s.classList.remove("show"), this._queueCallback(r, e, !0))
//         : r();
//     }
//     _transitionComplete(e, i, n) {
//       if (i) {
//         i.classList.remove("active");
//         const e = t.findOne(":scope > .dropdown-menu .active", i.parentNode);
//         e && e.classList.remove("active"),
//           "tab" === i.getAttribute("role") &&
//             i.setAttribute("aria-selected", !1);
//       }
//       e.classList.add("active"),
//         "tab" === e.getAttribute("role") && e.setAttribute("aria-selected", !0),
//         m(e),
//         e.classList.contains("fade") && e.classList.add("show");
//       let s = e.parentNode;
//       if (
//         (s && "LI" === s.nodeName && (s = s.parentNode),
//         s && s.classList.contains("dropdown-menu"))
//       ) {
//         const i = e.closest(".dropdown");
//         i &&
//           t
//             .find(".dropdown-toggle", i)
//             .forEach((t) => t.classList.add("active")),
//           e.setAttribute("aria-expanded", !0);
//       }
//       n && n();
//     }
//     static jQueryInterface(t) {
//       return this.each(function () {
//         const e = w.get(this, "bs.tab") || new ni(this);
//         if ("string" == typeof t) {
//           if (void 0 === e[t]) throw new TypeError(`No method named "${t}"`);
//           e[t]();
//         }
//       });
//     }
//   }
//   H.on(
//     document,
//     "click.bs.tab.data-api",
//     '[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',
//     function (t) {
//       ["A", "AREA"].includes(this.tagName) && t.preventDefault(),
//         u(this) || (w.get(this, "bs.tab") || new ni(this)).show();
//     }
//   ),
//     b(ni);
//   const si = { animation: "boolean", autohide: "boolean", delay: "number" },
//     oi = { animation: !0, autohide: !0, delay: 5e3 };
//   class ri extends R {
//     constructor(t, e) {
//       super(t),
//         (this._config = this._getConfig(e)),
//         (this._timeout = null),
//         (this._hasMouseInteraction = !1),
//         (this._hasKeyboardInteraction = !1),
//         this._setListeners();
//     }
//     static get DefaultType() {
//       return si;
//     }
//     static get Default() {
//       return oi;
//     }
//     static get NAME() {
//       return "toast";
//     }
//     show() {
//       H.trigger(this._element, "show.bs.toast").defaultPrevented ||
//         (this._clearTimeout(),
//         this._config.animation && this._element.classList.add("fade"),
//         this._element.classList.remove("hide"),
//         m(this._element),
//         this._element.classList.add("showing"),
//         this._queueCallback(
//           () => {
//             this._element.classList.remove("showing"),
//               this._element.classList.add("show"),
//               H.trigger(this._element, "shown.bs.toast"),
//               this._maybeScheduleHide();
//           },
//           this._element,
//           this._config.animation
//         ));
//     }
//     hide() {
//       this._element.classList.contains("show") &&
//         (H.trigger(this._element, "hide.bs.toast").defaultPrevented ||
//           (this._element.classList.remove("show"),
//           this._queueCallback(
//             () => {
//               this._element.classList.add("hide"),
//                 H.trigger(this._element, "hidden.bs.toast");
//             },
//             this._element,
//             this._config.animation
//           )));
//     }
//     dispose() {
//       this._clearTimeout(),
//         this._element.classList.contains("show") &&
//           this._element.classList.remove("show"),
//         super.dispose();
//     }
//     _getConfig(t) {
//       return (
//         (t = {
//           ...oi,
//           ...U.getDataAttributes(this._element),
//           ...("object" == typeof t && t ? t : {}),
//         }),
//         d("toast", t, this.constructor.DefaultType),
//         t
//       );
//     }
//     _maybeScheduleHide() {
//       this._config.autohide &&
//         (this._hasMouseInteraction ||
//           this._hasKeyboardInteraction ||
//           (this._timeout = setTimeout(() => {
//             this.hide();
//           }, this._config.delay)));
//     }
//     _onInteraction(t, e) {
//       switch (t.type) {
//         case "mouseover":
//         case "mouseout":
//           this._hasMouseInteraction = e;
//           break;
//         case "focusin":
//         case "focusout":
//           this._hasKeyboardInteraction = e;
//       }
//       if (e) return void this._clearTimeout();
//       const i = t.relatedTarget;
//       this._element === i ||
//         this._element.contains(i) ||
//         this._maybeScheduleHide();
//     }
//     _setListeners() {
//       H.on(
//         this._element,
//         "click.dismiss.bs.toast",
//         '[data-bs-dismiss="toast"]',
//         () => this.hide()
//       ),
//         H.on(this._element, "mouseover.bs.toast", (t) =>
//           this._onInteraction(t, !0)
//         ),
//         H.on(this._element, "mouseout.bs.toast", (t) =>
//           this._onInteraction(t, !1)
//         ),
//         H.on(this._element, "focusin.bs.toast", (t) =>
//           this._onInteraction(t, !0)
//         ),
//         H.on(this._element, "focusout.bs.toast", (t) =>
//           this._onInteraction(t, !1)
//         );
//     }
//     _clearTimeout() {
//       clearTimeout(this._timeout), (this._timeout = null);
//     }
//     static jQueryInterface(t) {
//       return this.each(function () {
//         let e = w.get(this, "bs.toast");
//         if (
//           (e || (e = new ri(this, "object" == typeof t && t)),
//           "string" == typeof t)
//         ) {
//           if (void 0 === e[t]) throw new TypeError(`No method named "${t}"`);
//           e[t](this);
//         }
//       });
//     }
//   }
//   return (
//     b(ri),
//     {
//       Alert: B,
//       Button: W,
//       Carousel: Q,
//       Collapse: J,
//       Dropdown: we,
//       Modal: Ie,
//       Offcanvas: Me,
//       Popover: Je,
//       ScrollSpy: ii,
//       Tab: ni,
//       Toast: ri,
//       Tooltip: Xe,
//     }
//   );
// });
//# sourceMappingURL=bootstrap.bundle.min.js.map
/*!
 * Bootstrap v4.2.1 (https://getbootstrap.com/)
 * Copyright 2011-2018 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 */
!(function (t, e) {
  "object" == typeof exports && "undefined" != typeof module
    ? e(exports, require("popper.js"), require("jquery"))
    : "function" == typeof define && define.amd
    ? define(["exports", "popper.js", "jquery"], e)
    : e((t.bootstrap = {}), t.Popper, t.jQuery);
})(this, function (t, u, g) {
  "use strict";
  function i(t, e) {
    for (var n = 0; n < e.length; n++) {
      var i = e[n];
      (i.enumerable = i.enumerable || !1),
        (i.configurable = !0),
        "value" in i && (i.writable = !0),
        Object.defineProperty(t, i.key, i);
    }
  }
  function s(t, e, n) {
    return e && i(t.prototype, e), n && i(t, n), t;
  }
  function l(o) {
    for (var t = 1; t < arguments.length; t++) {
      var r = null != arguments[t] ? arguments[t] : {},
        e = Object.keys(r);
      "function" == typeof Object.getOwnPropertySymbols &&
        (e = e.concat(
          Object.getOwnPropertySymbols(r).filter(function (t) {
            return Object.getOwnPropertyDescriptor(r, t).enumerable;
          })
        )),
        e.forEach(function (t) {
          var e, n, i;
          (e = o),
            (i = r[(n = t)]),
            n in e
              ? Object.defineProperty(e, n, {
                  value: i,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                })
              : (e[n] = i);
        });
    }
    return o;
  }
  (u = u && u.hasOwnProperty("default") ? u.default : u),
    (g = g && g.hasOwnProperty("default") ? g.default : g);
  var e = "transitionend";
  function n(t) {
    var e = this,
      n = !1;
    return (
      g(this).one(_.TRANSITION_END, function () {
        n = !0;
      }),
      setTimeout(function () {
        n || _.triggerTransitionEnd(e);
      }, t),
      this
    );
  }
  var _ = {
    TRANSITION_END: "bsTransitionEnd",
    getUID: function (t) {
      for (; (t += ~~(1e6 * Math.random())), document.getElementById(t); );
      return t;
    },
    getSelectorFromElement: function (t) {
      var e = t.getAttribute("data-target");
      if (!e || "#" === e) {
        var n = t.getAttribute("href");
        e = n && "#" !== n ? n.trim() : "";
      }
      return e && document.querySelector(e) ? e : null;
    },
    getTransitionDurationFromElement: function (t) {
      if (!t) return 0;
      var e = g(t).css("transition-duration"),
        n = g(t).css("transition-delay"),
        i = parseFloat(e),
        o = parseFloat(n);
      return i || o
        ? ((e = e.split(",")[0]),
          (n = n.split(",")[0]),
          1e3 * (parseFloat(e) + parseFloat(n)))
        : 0;
    },
    reflow: function (t) {
      return t.offsetHeight;
    },
    triggerTransitionEnd: function (t) {
      g(t).trigger(e);
    },
    supportsTransitionEnd: function () {
      return Boolean(e);
    },
    isElement: function (t) {
      return (t[0] || t).nodeType;
    },
    typeCheckConfig: function (t, e, n) {
      for (var i in n)
        if (Object.prototype.hasOwnProperty.call(n, i)) {
          var o = n[i],
            r = e[i],
            s =
              r && _.isElement(r)
                ? "element"
                : ((a = r),
                  {}.toString
                    .call(a)
                    .match(/\s([a-z]+)/i)[1]
                    .toLowerCase());
          if (!new RegExp(o).test(s))
            throw new Error(
              t.toUpperCase() +
                ': Option "' +
                i +
                '" provided type "' +
                s +
                '" but expected type "' +
                o +
                '".'
            );
        }
      var a;
    },
    findShadowRoot: function (t) {
      if (!document.documentElement.attachShadow) return null;
      if ("function" != typeof t.getRootNode)
        return t instanceof ShadowRoot
          ? t
          : t.parentNode
          ? _.findShadowRoot(t.parentNode)
          : null;
      var e = t.getRootNode();
      return e instanceof ShadowRoot ? e : null;
    },
  };
  (g.fn.emulateTransitionEnd = n),
    (g.event.special[_.TRANSITION_END] = {
      bindType: e,
      delegateType: e,
      handle: function (t) {
        if (g(t.target).is(this))
          return t.handleObj.handler.apply(this, arguments);
      },
    });
  var o = "alert",
    r = "bs.alert",
    a = "." + r,
    c = g.fn[o],
    h = {
      CLOSE: "close" + a,
      CLOSED: "closed" + a,
      CLICK_DATA_API: "click" + a + ".data-api",
    },
    f = "alert",
    d = "fade",
    m = "show",
    p = (function () {
      function i(t) {
        this._element = t;
      }
      var t = i.prototype;
      return (
        (t.close = function (t) {
          var e = this._element;
          t && (e = this._getRootElement(t)),
            this._triggerCloseEvent(e).isDefaultPrevented() ||
              this._removeElement(e);
        }),
        (t.dispose = function () {
          g.removeData(this._element, r), (this._element = null);
        }),
        (t._getRootElement = function (t) {
          var e = _.getSelectorFromElement(t),
            n = !1;
          return (
            e && (n = document.querySelector(e)),
            n || (n = g(t).closest("." + f)[0]),
            n
          );
        }),
        (t._triggerCloseEvent = function (t) {
          var e = g.Event(h.CLOSE);
          return g(t).trigger(e), e;
        }),
        (t._removeElement = function (e) {
          var n = this;
          if ((g(e).removeClass(m), g(e).hasClass(d))) {
            var t = _.getTransitionDurationFromElement(e);
            g(e)
              .one(_.TRANSITION_END, function (t) {
                return n._destroyElement(e, t);
              })
              .emulateTransitionEnd(t);
          } else this._destroyElement(e);
        }),
        (t._destroyElement = function (t) {
          g(t).detach().trigger(h.CLOSED).remove();
        }),
        (i._jQueryInterface = function (n) {
          return this.each(function () {
            var t = g(this),
              e = t.data(r);
            e || ((e = new i(this)), t.data(r, e)), "close" === n && e[n](this);
          });
        }),
        (i._handleDismiss = function (e) {
          return function (t) {
            t && t.preventDefault(), e.close(this);
          };
        }),
        s(i, null, [
          {
            key: "VERSION",
            get: function () {
              return "4.2.1";
            },
          },
        ]),
        i
      );
    })();
  g(document).on(
    h.CLICK_DATA_API,
    '[data-dismiss="alert"]',
    p._handleDismiss(new p())
  ),
    (g.fn[o] = p._jQueryInterface),
    (g.fn[o].Constructor = p),
    (g.fn[o].noConflict = function () {
      return (g.fn[o] = c), p._jQueryInterface;
    });
  var v = "button",
    E = "bs.button",
    y = "." + E,
    C = ".data-api",
    T = g.fn[v],
    S = "active",
    b = "btn",
    I = "focus",
    D = '[data-toggle^="button"]',
    w = '[data-toggle="buttons"]',
    A = 'input:not([type="hidden"])',
    N = ".active",
    O = ".btn",
    k = {
      CLICK_DATA_API: "click" + y + C,
      FOCUS_BLUR_DATA_API: "focus" + y + C + " blur" + y + C,
    },
    P = (function () {
      function n(t) {
        this._element = t;
      }
      var t = n.prototype;
      return (
        (t.toggle = function () {
          var t = !0,
            e = !0,
            n = g(this._element).closest(w)[0];
          if (n) {
            var i = this._element.querySelector(A);
            if (i) {
              if ("radio" === i.type)
                if (i.checked && this._element.classList.contains(S)) t = !1;
                else {
                  var o = n.querySelector(N);
                  o && g(o).removeClass(S);
                }
              if (t) {
                if (
                  i.hasAttribute("disabled") ||
                  n.hasAttribute("disabled") ||
                  i.classList.contains("disabled") ||
                  n.classList.contains("disabled")
                )
                  return;
                (i.checked = !this._element.classList.contains(S)),
                  g(i).trigger("change");
              }
              i.focus(), (e = !1);
            }
          }
          e &&
            this._element.setAttribute(
              "aria-pressed",
              !this._element.classList.contains(S)
            ),
            t && g(this._element).toggleClass(S);
        }),
        (t.dispose = function () {
          g.removeData(this._element, E), (this._element = null);
        }),
        (n._jQueryInterface = function (e) {
          return this.each(function () {
            var t = g(this).data(E);
            t || ((t = new n(this)), g(this).data(E, t)),
              "toggle" === e && t[e]();
          });
        }),
        s(n, null, [
          {
            key: "VERSION",
            get: function () {
              return "4.2.1";
            },
          },
        ]),
        n
      );
    })();
  g(document)
    .on(k.CLICK_DATA_API, D, function (t) {
      t.preventDefault();
      var e = t.target;
      g(e).hasClass(b) || (e = g(e).closest(O)),
        P._jQueryInterface.call(g(e), "toggle");
    })
    .on(k.FOCUS_BLUR_DATA_API, D, function (t) {
      var e = g(t.target).closest(O)[0];
      g(e).toggleClass(I, /^focus(in)?$/.test(t.type));
    }),
    (g.fn[v] = P._jQueryInterface),
    (g.fn[v].Constructor = P),
    (g.fn[v].noConflict = function () {
      return (g.fn[v] = T), P._jQueryInterface;
    });
  var L = "carousel",
    j = "bs.carousel",
    H = "." + j,
    R = ".data-api",
    U = g.fn[L],
    W = {
      interval: 5e3,
      keyboard: !0,
      slide: !1,
      pause: "hover",
      wrap: !0,
      touch: !0,
    },
    x = {
      interval: "(number|boolean)",
      keyboard: "boolean",
      slide: "(boolean|string)",
      pause: "(string|boolean)",
      wrap: "boolean",
      touch: "boolean",
    },
    F = "next",
    q = "prev",
    M = "left",
    K = "right",
    Q = {
      SLIDE: "slide" + H,
      SLID: "slid" + H,
      KEYDOWN: "keydown" + H,
      MOUSEENTER: "mouseenter" + H,
      MOUSELEAVE: "mouseleave" + H,
      TOUCHSTART: "touchstart" + H,
      TOUCHMOVE: "touchmove" + H,
      TOUCHEND: "touchend" + H,
      POINTERDOWN: "pointerdown" + H,
      POINTERUP: "pointerup" + H,
      DRAG_START: "dragstart" + H,
      LOAD_DATA_API: "load" + H + R,
      CLICK_DATA_API: "click" + H + R,
    },
    B = "carousel",
    V = "active",
    Y = "slide",
    X = "carousel-item-right",
    z = "carousel-item-left",
    G = "carousel-item-next",
    J = "carousel-item-prev",
    Z = "pointer-event",
    $ = ".active",
    tt = ".active.carousel-item",
    et = ".carousel-item",
    nt = ".carousel-item img",
    it = ".carousel-item-next, .carousel-item-prev",
    ot = ".carousel-indicators",
    rt = "[data-slide], [data-slide-to]",
    st = '[data-ride="carousel"]',
    at = { TOUCH: "touch", PEN: "pen" },
    lt = (function () {
      function r(t, e) {
        (this._items = null),
          (this._interval = null),
          (this._activeElement = null),
          (this._isPaused = !1),
          (this._isSliding = !1),
          (this.touchTimeout = null),
          (this.touchStartX = 0),
          (this.touchDeltaX = 0),
          (this._config = this._getConfig(e)),
          (this._element = t),
          (this._indicatorsElement = this._element.querySelector(ot)),
          (this._touchSupported =
            "ontouchstart" in document.documentElement ||
            0 < navigator.maxTouchPoints),
          (this._pointerEvent = Boolean(
            window.PointerEvent || window.MSPointerEvent
          )),
          this._addEventListeners();
      }
      var t = r.prototype;
      return (
        (t.next = function () {
          this._isSliding || this._slide(F);
        }),
        (t.nextWhenVisible = function () {
          !document.hidden &&
            g(this._element).is(":visible") &&
            "hidden" !== g(this._element).css("visibility") &&
            this.next();
        }),
        (t.prev = function () {
          this._isSliding || this._slide(q);
        }),
        (t.pause = function (t) {
          t || (this._isPaused = !0),
            this._element.querySelector(it) &&
              (_.triggerTransitionEnd(this._element), this.cycle(!0)),
            clearInterval(this._interval),
            (this._interval = null);
        }),
        (t.cycle = function (t) {
          t || (this._isPaused = !1),
            this._interval &&
              (clearInterval(this._interval), (this._interval = null)),
            this._config.interval &&
              !this._isPaused &&
              (this._interval = setInterval(
                (document.visibilityState
                  ? this.nextWhenVisible
                  : this.next
                ).bind(this),
                this._config.interval
              ));
        }),
        (t.to = function (t) {
          var e = this;
          this._activeElement = this._element.querySelector(tt);
          var n = this._getItemIndex(this._activeElement);
          if (!(t > this._items.length - 1 || t < 0))
            if (this._isSliding)
              g(this._element).one(Q.SLID, function () {
                return e.to(t);
              });
            else {
              if (n === t) return this.pause(), void this.cycle();
              var i = n < t ? F : q;
              this._slide(i, this._items[t]);
            }
        }),
        (t.dispose = function () {
          g(this._element).off(H),
            g.removeData(this._element, j),
            (this._items = null),
            (this._config = null),
            (this._element = null),
            (this._interval = null),
            (this._isPaused = null),
            (this._isSliding = null),
            (this._activeElement = null),
            (this._indicatorsElement = null);
        }),
        (t._getConfig = function (t) {
          return (t = l({}, W, t)), _.typeCheckConfig(L, t, x), t;
        }),
        (t._handleSwipe = function () {
          var t = Math.abs(this.touchDeltaX);
          if (!(t <= 40)) {
            var e = t / this.touchDeltaX;
            0 < e && this.prev(), e < 0 && this.next();
          }
        }),
        (t._addEventListeners = function () {
          var e = this;
          this._config.keyboard &&
            g(this._element).on(Q.KEYDOWN, function (t) {
              return e._keydown(t);
            }),
            "hover" === this._config.pause &&
              g(this._element)
                .on(Q.MOUSEENTER, function (t) {
                  return e.pause(t);
                })
                .on(Q.MOUSELEAVE, function (t) {
                  return e.cycle(t);
                }),
            this._addTouchEventListeners();
        }),
        (t._addTouchEventListeners = function () {
          var n = this;
          if (this._touchSupported) {
            var e = function (t) {
                n._pointerEvent && at[t.originalEvent.pointerType.toUpperCase()]
                  ? (n.touchStartX = t.originalEvent.clientX)
                  : n._pointerEvent ||
                    (n.touchStartX = t.originalEvent.touches[0].clientX);
              },
              i = function (t) {
                n._pointerEvent &&
                  at[t.originalEvent.pointerType.toUpperCase()] &&
                  (n.touchDeltaX = t.originalEvent.clientX - n.touchStartX),
                  n._handleSwipe(),
                  "hover" === n._config.pause &&
                    (n.pause(),
                    n.touchTimeout && clearTimeout(n.touchTimeout),
                    (n.touchTimeout = setTimeout(function (t) {
                      return n.cycle(t);
                    }, 500 + n._config.interval)));
              };
            g(this._element.querySelectorAll(nt)).on(
              Q.DRAG_START,
              function (t) {
                return t.preventDefault();
              }
            ),
              this._pointerEvent
                ? (g(this._element).on(Q.POINTERDOWN, function (t) {
                    return e(t);
                  }),
                  g(this._element).on(Q.POINTERUP, function (t) {
                    return i(t);
                  }),
                  this._element.classList.add(Z))
                : (g(this._element).on(Q.TOUCHSTART, function (t) {
                    return e(t);
                  }),
                  g(this._element).on(Q.TOUCHMOVE, function (t) {
                    var e;
                    (e = t).originalEvent.touches &&
                    1 < e.originalEvent.touches.length
                      ? (n.touchDeltaX = 0)
                      : (n.touchDeltaX =
                          e.originalEvent.touches[0].clientX - n.touchStartX);
                  }),
                  g(this._element).on(Q.TOUCHEND, function (t) {
                    return i(t);
                  }));
          }
        }),
        (t._keydown = function (t) {
          if (!/input|textarea/i.test(t.target.tagName))
            switch (t.which) {
              case 37:
                t.preventDefault(), this.prev();
                break;
              case 39:
                t.preventDefault(), this.next();
            }
        }),
        (t._getItemIndex = function (t) {
          return (
            (this._items =
              t && t.parentNode
                ? [].slice.call(t.parentNode.querySelectorAll(et))
                : []),
            this._items.indexOf(t)
          );
        }),
        (t._getItemByDirection = function (t, e) {
          var n = t === F,
            i = t === q,
            o = this._getItemIndex(e),
            r = this._items.length - 1;
          if (((i && 0 === o) || (n && o === r)) && !this._config.wrap)
            return e;
          var s = (o + (t === q ? -1 : 1)) % this._items.length;
          return -1 === s
            ? this._items[this._items.length - 1]
            : this._items[s];
        }),
        (t._triggerSlideEvent = function (t, e) {
          var n = this._getItemIndex(t),
            i = this._getItemIndex(this._element.querySelector(tt)),
            o = g.Event(Q.SLIDE, {
              relatedTarget: t,
              direction: e,
              from: i,
              to: n,
            });
          return g(this._element).trigger(o), o;
        }),
        (t._setActiveIndicatorElement = function (t) {
          if (this._indicatorsElement) {
            var e = [].slice.call(this._indicatorsElement.querySelectorAll($));
            g(e).removeClass(V);
            var n = this._indicatorsElement.children[this._getItemIndex(t)];
            n && g(n).addClass(V);
          }
        }),
        (t._slide = function (t, e) {
          var n,
            i,
            o,
            r = this,
            s = this._element.querySelector(tt),
            a = this._getItemIndex(s),
            l = e || (s && this._getItemByDirection(t, s)),
            c = this._getItemIndex(l),
            h = Boolean(this._interval);
          if (
            ((o = t === F ? ((n = z), (i = G), M) : ((n = X), (i = J), K)),
            l && g(l).hasClass(V))
          )
            this._isSliding = !1;
          else if (
            !this._triggerSlideEvent(l, o).isDefaultPrevented() &&
            s &&
            l
          ) {
            (this._isSliding = !0),
              h && this.pause(),
              this._setActiveIndicatorElement(l);
            var u = g.Event(Q.SLID, {
              relatedTarget: l,
              direction: o,
              from: a,
              to: c,
            });
            if (g(this._element).hasClass(Y)) {
              g(l).addClass(i), _.reflow(l), g(s).addClass(n), g(l).addClass(n);
              var f = parseInt(l.getAttribute("data-interval"), 10);
              this._config.interval = f
                ? ((this._config.defaultInterval =
                    this._config.defaultInterval || this._config.interval),
                  f)
                : this._config.defaultInterval || this._config.interval;
              var d = _.getTransitionDurationFromElement(s);
              g(s)
                .one(_.TRANSITION_END, function () {
                  g(l)
                    .removeClass(n + " " + i)
                    .addClass(V),
                    g(s).removeClass(V + " " + i + " " + n),
                    (r._isSliding = !1),
                    setTimeout(function () {
                      return g(r._element).trigger(u);
                    }, 0);
                })
                .emulateTransitionEnd(d);
            } else
              g(s).removeClass(V),
                g(l).addClass(V),
                (this._isSliding = !1),
                g(this._element).trigger(u);
            h && this.cycle();
          }
        }),
        (r._jQueryInterface = function (i) {
          return this.each(function () {
            var t = g(this).data(j),
              e = l({}, W, g(this).data());
            "object" == typeof i && (e = l({}, e, i));
            var n = "string" == typeof i ? i : e.slide;
            if (
              (t || ((t = new r(this, e)), g(this).data(j, t)),
              "number" == typeof i)
            )
              t.to(i);
            else if ("string" == typeof n) {
              if ("undefined" == typeof t[n])
                throw new TypeError('No method named "' + n + '"');
              t[n]();
            } else e.interval && (t.pause(), t.cycle());
          });
        }),
        (r._dataApiClickHandler = function (t) {
          var e = _.getSelectorFromElement(this);
          if (e) {
            var n = g(e)[0];
            if (n && g(n).hasClass(B)) {
              var i = l({}, g(n).data(), g(this).data()),
                o = this.getAttribute("data-slide-to");
              o && (i.interval = !1),
                r._jQueryInterface.call(g(n), i),
                o && g(n).data(j).to(o),
                t.preventDefault();
            }
          }
        }),
        s(r, null, [
          {
            key: "VERSION",
            get: function () {
              return "4.2.1";
            },
          },
          {
            key: "Default",
            get: function () {
              return W;
            },
          },
        ]),
        r
      );
    })();
  g(document).on(Q.CLICK_DATA_API, rt, lt._dataApiClickHandler),
    g(window).on(Q.LOAD_DATA_API, function () {
      for (
        var t = [].slice.call(document.querySelectorAll(st)),
          e = 0,
          n = t.length;
        e < n;
        e++
      ) {
        var i = g(t[e]);
        lt._jQueryInterface.call(i, i.data());
      }
    }),
    (g.fn[L] = lt._jQueryInterface),
    (g.fn[L].Constructor = lt),
    (g.fn[L].noConflict = function () {
      return (g.fn[L] = U), lt._jQueryInterface;
    });
  var ct = "collapse",
    ht = "bs.collapse",
    ut = "." + ht,
    ft = g.fn[ct],
    dt = { toggle: !0, parent: "" },
    gt = { toggle: "boolean", parent: "(string|element)" },
    _t = {
      SHOW: "show" + ut,
      SHOWN: "shown" + ut,
      HIDE: "hide" + ut,
      HIDDEN: "hidden" + ut,
      CLICK_DATA_API: "click" + ut + ".data-api",
    },
    mt = "show",
    pt = "collapse",
    vt = "collapsing",
    Et = "collapsed",
    yt = "width",
    Ct = "height",
    Tt = ".show, .collapsing",
    St = '[data-toggle="collapse"]',
    bt = (function () {
      function a(e, t) {
        (this._isTransitioning = !1),
          (this._element = e),
          (this._config = this._getConfig(t)),
          (this._triggerArray = [].slice.call(
            document.querySelectorAll(
              '[data-toggle="collapse"][href="#' +
                e.id +
                '"],[data-toggle="collapse"][data-target="#' +
                e.id +
                '"]'
            )
          ));
        for (
          var n = [].slice.call(document.querySelectorAll(St)),
            i = 0,
            o = n.length;
          i < o;
          i++
        ) {
          var r = n[i],
            s = _.getSelectorFromElement(r),
            a = [].slice
              .call(document.querySelectorAll(s))
              .filter(function (t) {
                return t === e;
              });
          null !== s &&
            0 < a.length &&
            ((this._selector = s), this._triggerArray.push(r));
        }
        (this._parent = this._config.parent ? this._getParent() : null),
          this._config.parent ||
            this._addAriaAndCollapsedClass(this._element, this._triggerArray),
          this._config.toggle && this.toggle();
      }
      var t = a.prototype;
      return (
        (t.toggle = function () {
          g(this._element).hasClass(mt) ? this.hide() : this.show();
        }),
        (t.show = function () {
          var t,
            e,
            n = this;
          if (
            !this._isTransitioning &&
            !g(this._element).hasClass(mt) &&
            (this._parent &&
              0 ===
                (t = [].slice
                  .call(this._parent.querySelectorAll(Tt))
                  .filter(function (t) {
                    return "string" == typeof n._config.parent
                      ? t.getAttribute("data-parent") === n._config.parent
                      : t.classList.contains(pt);
                  })).length &&
              (t = null),
            !(
              t &&
              (e = g(t).not(this._selector).data(ht)) &&
              e._isTransitioning
            ))
          ) {
            var i = g.Event(_t.SHOW);
            if ((g(this._element).trigger(i), !i.isDefaultPrevented())) {
              t &&
                (a._jQueryInterface.call(g(t).not(this._selector), "hide"),
                e || g(t).data(ht, null));
              var o = this._getDimension();
              g(this._element).removeClass(pt).addClass(vt),
                (this._element.style[o] = 0),
                this._triggerArray.length &&
                  g(this._triggerArray)
                    .removeClass(Et)
                    .attr("aria-expanded", !0),
                this.setTransitioning(!0);
              var r = "scroll" + (o[0].toUpperCase() + o.slice(1)),
                s = _.getTransitionDurationFromElement(this._element);
              g(this._element)
                .one(_.TRANSITION_END, function () {
                  g(n._element).removeClass(vt).addClass(pt).addClass(mt),
                    (n._element.style[o] = ""),
                    n.setTransitioning(!1),
                    g(n._element).trigger(_t.SHOWN);
                })
                .emulateTransitionEnd(s),
                (this._element.style[o] = this._element[r] + "px");
            }
          }
        }),
        (t.hide = function () {
          var t = this;
          if (!this._isTransitioning && g(this._element).hasClass(mt)) {
            var e = g.Event(_t.HIDE);
            if ((g(this._element).trigger(e), !e.isDefaultPrevented())) {
              var n = this._getDimension();
              (this._element.style[n] =
                this._element.getBoundingClientRect()[n] + "px"),
                _.reflow(this._element),
                g(this._element).addClass(vt).removeClass(pt).removeClass(mt);
              var i = this._triggerArray.length;
              if (0 < i)
                for (var o = 0; o < i; o++) {
                  var r = this._triggerArray[o],
                    s = _.getSelectorFromElement(r);
                  if (null !== s)
                    g([].slice.call(document.querySelectorAll(s))).hasClass(
                      mt
                    ) || g(r).addClass(Et).attr("aria-expanded", !1);
                }
              this.setTransitioning(!0);
              this._element.style[n] = "";
              var a = _.getTransitionDurationFromElement(this._element);
              g(this._element)
                .one(_.TRANSITION_END, function () {
                  t.setTransitioning(!1),
                    g(t._element)
                      .removeClass(vt)
                      .addClass(pt)
                      .trigger(_t.HIDDEN);
                })
                .emulateTransitionEnd(a);
            }
          }
        }),
        (t.setTransitioning = function (t) {
          this._isTransitioning = t;
        }),
        (t.dispose = function () {
          g.removeData(this._element, ht),
            (this._config = null),
            (this._parent = null),
            (this._element = null),
            (this._triggerArray = null),
            (this._isTransitioning = null);
        }),
        (t._getConfig = function (t) {
          return (
            ((t = l({}, dt, t)).toggle = Boolean(t.toggle)),
            _.typeCheckConfig(ct, t, gt),
            t
          );
        }),
        (t._getDimension = function () {
          return g(this._element).hasClass(yt) ? yt : Ct;
        }),
        (t._getParent = function () {
          var t,
            n = this;
          _.isElement(this._config.parent)
            ? ((t = this._config.parent),
              "undefined" != typeof this._config.parent.jquery &&
                (t = this._config.parent[0]))
            : (t = document.querySelector(this._config.parent));
          var e =
              '[data-toggle="collapse"][data-parent="' +
              this._config.parent +
              '"]',
            i = [].slice.call(t.querySelectorAll(e));
          return (
            g(i).each(function (t, e) {
              n._addAriaAndCollapsedClass(a._getTargetFromElement(e), [e]);
            }),
            t
          );
        }),
        (t._addAriaAndCollapsedClass = function (t, e) {
          var n = g(t).hasClass(mt);
          e.length && g(e).toggleClass(Et, !n).attr("aria-expanded", n);
        }),
        (a._getTargetFromElement = function (t) {
          var e = _.getSelectorFromElement(t);
          return e ? document.querySelector(e) : null;
        }),
        (a._jQueryInterface = function (i) {
          return this.each(function () {
            var t = g(this),
              e = t.data(ht),
              n = l({}, dt, t.data(), "object" == typeof i && i ? i : {});
            if (
              (!e && n.toggle && /show|hide/.test(i) && (n.toggle = !1),
              e || ((e = new a(this, n)), t.data(ht, e)),
              "string" == typeof i)
            ) {
              if ("undefined" == typeof e[i])
                throw new TypeError('No method named "' + i + '"');
              e[i]();
            }
          });
        }),
        s(a, null, [
          {
            key: "VERSION",
            get: function () {
              return "4.2.1";
            },
          },
          {
            key: "Default",
            get: function () {
              return dt;
            },
          },
        ]),
        a
      );
    })();
  g(document).on(_t.CLICK_DATA_API, St, function (t) {
    "A" === t.currentTarget.tagName && t.preventDefault();
    var n = g(this),
      e = _.getSelectorFromElement(this),
      i = [].slice.call(document.querySelectorAll(e));
    g(i).each(function () {
      var t = g(this),
        e = t.data(ht) ? "toggle" : n.data();
      bt._jQueryInterface.call(t, e);
    });
  }),
    (g.fn[ct] = bt._jQueryInterface),
    (g.fn[ct].Constructor = bt),
    (g.fn[ct].noConflict = function () {
      return (g.fn[ct] = ft), bt._jQueryInterface;
    });
  var It = "dropdown",
    Dt = "bs.dropdown",
    wt = "." + Dt,
    At = ".data-api",
    Nt = g.fn[It],
    Ot = new RegExp("38|40|27"),
    kt = {
      HIDE: "hide" + wt,
      HIDDEN: "hidden" + wt,
      SHOW: "show" + wt,
      SHOWN: "shown" + wt,
      CLICK: "click" + wt,
      CLICK_DATA_API: "click" + wt + At,
      KEYDOWN_DATA_API: "keydown" + wt + At,
      KEYUP_DATA_API: "keyup" + wt + At,
    },
    Pt = "disabled",
    Lt = "show",
    jt = "dropup",
    Ht = "dropright",
    Rt = "dropleft",
    Ut = "dropdown-menu-right",
    Wt = "position-static",
    xt = '[data-toggle="dropdown"]',
    Ft = ".dropdown form",
    qt = ".dropdown-menu",
    Mt = ".navbar-nav",
    Kt = ".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",
    Qt = "top-start",
    Bt = "top-end",
    Vt = "bottom-start",
    Yt = "bottom-end",
    Xt = "right-start",
    zt = "left-start",
    Gt = {
      offset: 0,
      flip: !0,
      boundary: "scrollParent",
      reference: "toggle",
      display: "dynamic",
    },
    Jt = {
      offset: "(number|string|function)",
      flip: "boolean",
      boundary: "(string|element)",
      reference: "(string|element)",
      display: "string",
    },
    Zt = (function () {
      function c(t, e) {
        (this._element = t),
          (this._popper = null),
          (this._config = this._getConfig(e)),
          (this._menu = this._getMenuElement()),
          (this._inNavbar = this._detectNavbar()),
          this._addEventListeners();
      }
      var t = c.prototype;
      return (
        (t.toggle = function () {
          if (!this._element.disabled && !g(this._element).hasClass(Pt)) {
            var t = c._getParentFromElement(this._element),
              e = g(this._menu).hasClass(Lt);
            if ((c._clearMenus(), !e)) {
              var n = { relatedTarget: this._element },
                i = g.Event(kt.SHOW, n);
              if ((g(t).trigger(i), !i.isDefaultPrevented())) {
                if (!this._inNavbar) {
                  if ("undefined" == typeof u)
                    throw new TypeError(
                      "Bootstrap's dropdowns require Popper.js (https://popper.js.org/)"
                    );
                  var o = this._element;
                  "parent" === this._config.reference
                    ? (o = t)
                    : _.isElement(this._config.reference) &&
                      ((o = this._config.reference),
                      "undefined" != typeof this._config.reference.jquery &&
                        (o = this._config.reference[0])),
                    "scrollParent" !== this._config.boundary &&
                      g(t).addClass(Wt),
                    (this._popper = new u(
                      o,
                      this._menu,
                      this._getPopperConfig()
                    ));
                }
                "ontouchstart" in document.documentElement &&
                  0 === g(t).closest(Mt).length &&
                  g(document.body).children().on("mouseover", null, g.noop),
                  this._element.focus(),
                  this._element.setAttribute("aria-expanded", !0),
                  g(this._menu).toggleClass(Lt),
                  g(t).toggleClass(Lt).trigger(g.Event(kt.SHOWN, n));
              }
            }
          }
        }),
        (t.show = function () {
          if (
            !(
              this._element.disabled ||
              g(this._element).hasClass(Pt) ||
              g(this._menu).hasClass(Lt)
            )
          ) {
            var t = { relatedTarget: this._element },
              e = g.Event(kt.SHOW, t),
              n = c._getParentFromElement(this._element);
            g(n).trigger(e),
              e.isDefaultPrevented() ||
                (g(this._menu).toggleClass(Lt),
                g(n).toggleClass(Lt).trigger(g.Event(kt.SHOWN, t)));
          }
        }),
        (t.hide = function () {
          if (
            !this._element.disabled &&
            !g(this._element).hasClass(Pt) &&
            g(this._menu).hasClass(Lt)
          ) {
            var t = { relatedTarget: this._element },
              e = g.Event(kt.HIDE, t),
              n = c._getParentFromElement(this._element);
            g(n).trigger(e),
              e.isDefaultPrevented() ||
                (g(this._menu).toggleClass(Lt),
                g(n).toggleClass(Lt).trigger(g.Event(kt.HIDDEN, t)));
          }
        }),
        (t.dispose = function () {
          g.removeData(this._element, Dt),
            g(this._element).off(wt),
            (this._element = null),
            (this._menu = null) !== this._popper &&
              (this._popper.destroy(), (this._popper = null));
        }),
        (t.update = function () {
          (this._inNavbar = this._detectNavbar()),
            null !== this._popper && this._popper.scheduleUpdate();
        }),
        (t._addEventListeners = function () {
          var e = this;
          g(this._element).on(kt.CLICK, function (t) {
            t.preventDefault(), t.stopPropagation(), e.toggle();
          });
        }),
        (t._getConfig = function (t) {
          return (
            (t = l({}, this.constructor.Default, g(this._element).data(), t)),
            _.typeCheckConfig(It, t, this.constructor.DefaultType),
            t
          );
        }),
        (t._getMenuElement = function () {
          if (!this._menu) {
            var t = c._getParentFromElement(this._element);
            t && (this._menu = t.querySelector(qt));
          }
          return this._menu;
        }),
        (t._getPlacement = function () {
          var t = g(this._element.parentNode),
            e = Vt;
          return (
            t.hasClass(jt)
              ? ((e = Qt), g(this._menu).hasClass(Ut) && (e = Bt))
              : t.hasClass(Ht)
              ? (e = Xt)
              : t.hasClass(Rt)
              ? (e = zt)
              : g(this._menu).hasClass(Ut) && (e = Yt),
            e
          );
        }),
        (t._detectNavbar = function () {
          return 0 < g(this._element).closest(".navbar").length;
        }),
        (t._getPopperConfig = function () {
          var e = this,
            t = {};
          "function" == typeof this._config.offset
            ? (t.fn = function (t) {
                return (
                  (t.offsets = l(
                    {},
                    t.offsets,
                    e._config.offset(t.offsets) || {}
                  )),
                  t
                );
              })
            : (t.offset = this._config.offset);
          var n = {
            placement: this._getPlacement(),
            modifiers: {
              offset: t,
              flip: { enabled: this._config.flip },
              preventOverflow: { boundariesElement: this._config.boundary },
            },
          };
          return (
            "static" === this._config.display &&
              (n.modifiers.applyStyle = { enabled: !1 }),
            n
          );
        }),
        (c._jQueryInterface = function (e) {
          return this.each(function () {
            var t = g(this).data(Dt);
            if (
              (t ||
                ((t = new c(this, "object" == typeof e ? e : null)),
                g(this).data(Dt, t)),
              "string" == typeof e)
            ) {
              if ("undefined" == typeof t[e])
                throw new TypeError('No method named "' + e + '"');
              t[e]();
            }
          });
        }),
        (c._clearMenus = function (t) {
          if (!t || (3 !== t.which && ("keyup" !== t.type || 9 === t.which)))
            for (
              var e = [].slice.call(document.querySelectorAll(xt)),
                n = 0,
                i = e.length;
              n < i;
              n++
            ) {
              var o = c._getParentFromElement(e[n]),
                r = g(e[n]).data(Dt),
                s = { relatedTarget: e[n] };
              if ((t && "click" === t.type && (s.clickEvent = t), r)) {
                var a = r._menu;
                if (
                  g(o).hasClass(Lt) &&
                  !(
                    t &&
                    (("click" === t.type &&
                      /input|textarea/i.test(t.target.tagName)) ||
                      ("keyup" === t.type && 9 === t.which)) &&
                    g.contains(o, t.target)
                  )
                ) {
                  var l = g.Event(kt.HIDE, s);
                  g(o).trigger(l),
                    l.isDefaultPrevented() ||
                      ("ontouchstart" in document.documentElement &&
                        g(document.body)
                          .children()
                          .off("mouseover", null, g.noop),
                      e[n].setAttribute("aria-expanded", "false"),
                      g(a).removeClass(Lt),
                      g(o).removeClass(Lt).trigger(g.Event(kt.HIDDEN, s)));
                }
              }
            }
        }),
        (c._getParentFromElement = function (t) {
          var e,
            n = _.getSelectorFromElement(t);
          return n && (e = document.querySelector(n)), e || t.parentNode;
        }),
        (c._dataApiKeydownHandler = function (t) {
          if (
            (/input|textarea/i.test(t.target.tagName)
              ? !(
                  32 === t.which ||
                  (27 !== t.which &&
                    ((40 !== t.which && 38 !== t.which) ||
                      g(t.target).closest(qt).length))
                )
              : Ot.test(t.which)) &&
            (t.preventDefault(),
            t.stopPropagation(),
            !this.disabled && !g(this).hasClass(Pt))
          ) {
            var e = c._getParentFromElement(this),
              n = g(e).hasClass(Lt);
            if (n && (!n || (27 !== t.which && 32 !== t.which))) {
              var i = [].slice.call(e.querySelectorAll(Kt));
              if (0 !== i.length) {
                var o = i.indexOf(t.target);
                38 === t.which && 0 < o && o--,
                  40 === t.which && o < i.length - 1 && o++,
                  o < 0 && (o = 0),
                  i[o].focus();
              }
            } else {
              if (27 === t.which) {
                var r = e.querySelector(xt);
                g(r).trigger("focus");
              }
              g(this).trigger("click");
            }
          }
        }),
        s(c, null, [
          {
            key: "VERSION",
            get: function () {
              return "4.2.1";
            },
          },
          {
            key: "Default",
            get: function () {
              return Gt;
            },
          },
          {
            key: "DefaultType",
            get: function () {
              return Jt;
            },
          },
        ]),
        c
      );
    })();
  g(document)
    .on(kt.KEYDOWN_DATA_API, xt, Zt._dataApiKeydownHandler)
    .on(kt.KEYDOWN_DATA_API, qt, Zt._dataApiKeydownHandler)
    .on(kt.CLICK_DATA_API + " " + kt.KEYUP_DATA_API, Zt._clearMenus)
    .on(kt.CLICK_DATA_API, xt, function (t) {
      t.preventDefault(),
        t.stopPropagation(),
        Zt._jQueryInterface.call(g(this), "toggle");
    })
    .on(kt.CLICK_DATA_API, Ft, function (t) {
      t.stopPropagation();
    }),
    (g.fn[It] = Zt._jQueryInterface),
    (g.fn[It].Constructor = Zt),
    (g.fn[It].noConflict = function () {
      return (g.fn[It] = Nt), Zt._jQueryInterface;
    });
  var $t = "modal",
    te = "bs.modal",
    ee = "." + te,
    ne = g.fn[$t],
    ie = { backdrop: !0, keyboard: !0, focus: !0, show: !0 },
    oe = {
      backdrop: "(boolean|string)",
      keyboard: "boolean",
      focus: "boolean",
      show: "boolean",
    },
    re = {
      HIDE: "hide" + ee,
      HIDDEN: "hidden" + ee,
      SHOW: "show" + ee,
      SHOWN: "shown" + ee,
      FOCUSIN: "focusin" + ee,
      RESIZE: "resize" + ee,
      CLICK_DISMISS: "click.dismiss" + ee,
      KEYDOWN_DISMISS: "keydown.dismiss" + ee,
      MOUSEUP_DISMISS: "mouseup.dismiss" + ee,
      MOUSEDOWN_DISMISS: "mousedown.dismiss" + ee,
      CLICK_DATA_API: "click" + ee + ".data-api",
    },
    se = "modal-scrollbar-measure",
    ae = "modal-backdrop",
    le = "modal-open",
    ce = "fade",
    he = "show",
    ue = ".modal-dialog",
    fe = '[data-toggle="modal"]',
    de = '[data-dismiss="modal"]',
    ge = ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",
    _e = ".sticky-top",
    me = (function () {
      function o(t, e) {
        (this._config = this._getConfig(e)),
          (this._element = t),
          (this._dialog = t.querySelector(ue)),
          (this._backdrop = null),
          (this._isShown = !1),
          (this._isBodyOverflowing = !1),
          (this._ignoreBackdropClick = !1),
          (this._isTransitioning = !1),
          (this._scrollbarWidth = 0);
      }
      var t = o.prototype;
      return (
        (t.toggle = function (t) {
          return this._isShown ? this.hide() : this.show(t);
        }),
        (t.show = function (t) {
          var e = this;
          if (!this._isShown && !this._isTransitioning) {
            g(this._element).hasClass(ce) && (this._isTransitioning = !0);
            var n = g.Event(re.SHOW, { relatedTarget: t });
            g(this._element).trigger(n),
              this._isShown ||
                n.isDefaultPrevented() ||
                ((this._isShown = !0),
                this._checkScrollbar(),
                this._setScrollbar(),
                this._adjustDialog(),
                this._setEscapeEvent(),
                this._setResizeEvent(),
                g(this._element).on(re.CLICK_DISMISS, de, function (t) {
                  return e.hide(t);
                }),
                g(this._dialog).on(re.MOUSEDOWN_DISMISS, function () {
                  g(e._element).one(re.MOUSEUP_DISMISS, function (t) {
                    g(t.target).is(e._element) && (e._ignoreBackdropClick = !0);
                  });
                }),
                this._showBackdrop(function () {
                  return e._showElement(t);
                }));
          }
        }),
        (t.hide = function (t) {
          var e = this;
          if (
            (t && t.preventDefault(), this._isShown && !this._isTransitioning)
          ) {
            var n = g.Event(re.HIDE);
            if (
              (g(this._element).trigger(n),
              this._isShown && !n.isDefaultPrevented())
            ) {
              this._isShown = !1;
              var i = g(this._element).hasClass(ce);
              if (
                (i && (this._isTransitioning = !0),
                this._setEscapeEvent(),
                this._setResizeEvent(),
                g(document).off(re.FOCUSIN),
                g(this._element).removeClass(he),
                g(this._element).off(re.CLICK_DISMISS),
                g(this._dialog).off(re.MOUSEDOWN_DISMISS),
                i)
              ) {
                var o = _.getTransitionDurationFromElement(this._element);
                g(this._element)
                  .one(_.TRANSITION_END, function (t) {
                    return e._hideModal(t);
                  })
                  .emulateTransitionEnd(o);
              } else this._hideModal();
            }
          }
        }),
        (t.dispose = function () {
          [window, this._element, this._dialog].forEach(function (t) {
            return g(t).off(ee);
          }),
            g(document).off(re.FOCUSIN),
            g.removeData(this._element, te),
            (this._config = null),
            (this._element = null),
            (this._dialog = null),
            (this._backdrop = null),
            (this._isShown = null),
            (this._isBodyOverflowing = null),
            (this._ignoreBackdropClick = null),
            (this._isTransitioning = null),
            (this._scrollbarWidth = null);
        }),
        (t.handleUpdate = function () {
          this._adjustDialog();
        }),
        (t._getConfig = function (t) {
          return (t = l({}, ie, t)), _.typeCheckConfig($t, t, oe), t;
        }),
        (t._showElement = function (t) {
          var e = this,
            n = g(this._element).hasClass(ce);
          (this._element.parentNode &&
            this._element.parentNode.nodeType === Node.ELEMENT_NODE) ||
            document.body.appendChild(this._element),
            (this._element.style.display = "block"),
            this._element.removeAttribute("aria-hidden"),
            this._element.setAttribute("aria-modal", !0),
            (this._element.scrollTop = 0),
            n && _.reflow(this._element),
            g(this._element).addClass(he),
            this._config.focus && this._enforceFocus();
          var i = g.Event(re.SHOWN, { relatedTarget: t }),
            o = function () {
              e._config.focus && e._element.focus(),
                (e._isTransitioning = !1),
                g(e._element).trigger(i);
            };
          if (n) {
            var r = _.getTransitionDurationFromElement(this._dialog);
            g(this._dialog).one(_.TRANSITION_END, o).emulateTransitionEnd(r);
          } else o();
        }),
        (t._enforceFocus = function () {
          var e = this;
          g(document)
            .off(re.FOCUSIN)
            .on(re.FOCUSIN, function (t) {
              document !== t.target &&
                e._element !== t.target &&
                0 === g(e._element).has(t.target).length &&
                e._element.focus();
            });
        }),
        (t._setEscapeEvent = function () {
          var e = this;
          this._isShown && this._config.keyboard
            ? g(this._element).on(re.KEYDOWN_DISMISS, function (t) {
                27 === t.which && (t.preventDefault(), e.hide());
              })
            : this._isShown || g(this._element).off(re.KEYDOWN_DISMISS);
        }),
        (t._setResizeEvent = function () {
          var e = this;
          this._isShown
            ? g(window).on(re.RESIZE, function (t) {
                return e.handleUpdate(t);
              })
            : g(window).off(re.RESIZE);
        }),
        (t._hideModal = function () {
          var t = this;
          (this._element.style.display = "none"),
            this._element.setAttribute("aria-hidden", !0),
            this._element.removeAttribute("aria-modal"),
            (this._isTransitioning = !1),
            this._showBackdrop(function () {
              g(document.body).removeClass(le),
                t._resetAdjustments(),
                t._resetScrollbar(),
                g(t._element).trigger(re.HIDDEN);
            });
        }),
        (t._removeBackdrop = function () {
          this._backdrop &&
            (g(this._backdrop).remove(), (this._backdrop = null));
        }),
        (t._showBackdrop = function (t) {
          var e = this,
            n = g(this._element).hasClass(ce) ? ce : "";
          if (this._isShown && this._config.backdrop) {
            if (
              ((this._backdrop = document.createElement("div")),
              (this._backdrop.className = ae),
              n && this._backdrop.classList.add(n),
              g(this._backdrop).appendTo(document.body),
              g(this._element).on(re.CLICK_DISMISS, function (t) {
                e._ignoreBackdropClick
                  ? (e._ignoreBackdropClick = !1)
                  : t.target === t.currentTarget &&
                    ("static" === e._config.backdrop
                      ? e._element.focus()
                      : e.hide());
              }),
              n && _.reflow(this._backdrop),
              g(this._backdrop).addClass(he),
              !t)
            )
              return;
            if (!n) return void t();
            var i = _.getTransitionDurationFromElement(this._backdrop);
            g(this._backdrop).one(_.TRANSITION_END, t).emulateTransitionEnd(i);
          } else if (!this._isShown && this._backdrop) {
            g(this._backdrop).removeClass(he);
            var o = function () {
              e._removeBackdrop(), t && t();
            };
            if (g(this._element).hasClass(ce)) {
              var r = _.getTransitionDurationFromElement(this._backdrop);
              g(this._backdrop)
                .one(_.TRANSITION_END, o)
                .emulateTransitionEnd(r);
            } else o();
          } else t && t();
        }),
        (t._adjustDialog = function () {
          var t =
            this._element.scrollHeight > document.documentElement.clientHeight;
          !this._isBodyOverflowing &&
            t &&
            (this._element.style.paddingLeft = this._scrollbarWidth + "px"),
            this._isBodyOverflowing &&
              !t &&
              (this._element.style.paddingRight = this._scrollbarWidth + "px");
        }),
        (t._resetAdjustments = function () {
          (this._element.style.paddingLeft = ""),
            (this._element.style.paddingRight = "");
        }),
        (t._checkScrollbar = function () {
          var t = document.body.getBoundingClientRect();
          (this._isBodyOverflowing = t.left + t.right < window.innerWidth),
            (this._scrollbarWidth = this._getScrollbarWidth());
        }),
        (t._setScrollbar = function () {
          var o = this;
          if (this._isBodyOverflowing) {
            var t = [].slice.call(document.querySelectorAll(ge)),
              e = [].slice.call(document.querySelectorAll(_e));
            g(t).each(function (t, e) {
              var n = e.style.paddingRight,
                i = g(e).css("padding-right");
              g(e)
                .data("padding-right", n)
                .css("padding-right", parseFloat(i) + o._scrollbarWidth + "px");
            }),
              g(e).each(function (t, e) {
                var n = e.style.marginRight,
                  i = g(e).css("margin-right");
                g(e)
                  .data("margin-right", n)
                  .css(
                    "margin-right",
                    parseFloat(i) - o._scrollbarWidth + "px"
                  );
              });
            var n = document.body.style.paddingRight,
              i = g(document.body).css("padding-right");
            g(document.body)
              .data("padding-right", n)
              .css(
                "padding-right",
                parseFloat(i) + this._scrollbarWidth + "px"
              );
          }
          g(document.body).addClass(le);
        }),
        (t._resetScrollbar = function () {
          var t = [].slice.call(document.querySelectorAll(ge));
          g(t).each(function (t, e) {
            var n = g(e).data("padding-right");
            g(e).removeData("padding-right"), (e.style.paddingRight = n || "");
          });
          var e = [].slice.call(document.querySelectorAll("" + _e));
          g(e).each(function (t, e) {
            var n = g(e).data("margin-right");
            "undefined" != typeof n &&
              g(e).css("margin-right", n).removeData("margin-right");
          });
          var n = g(document.body).data("padding-right");
          g(document.body).removeData("padding-right"),
            (document.body.style.paddingRight = n || "");
        }),
        (t._getScrollbarWidth = function () {
          var t = document.createElement("div");
          (t.className = se), document.body.appendChild(t);
          var e = t.getBoundingClientRect().width - t.clientWidth;
          return document.body.removeChild(t), e;
        }),
        (o._jQueryInterface = function (n, i) {
          return this.each(function () {
            var t = g(this).data(te),
              e = l({}, ie, g(this).data(), "object" == typeof n && n ? n : {});
            if (
              (t || ((t = new o(this, e)), g(this).data(te, t)),
              "string" == typeof n)
            ) {
              if ("undefined" == typeof t[n])
                throw new TypeError('No method named "' + n + '"');
              t[n](i);
            } else e.show && t.show(i);
          });
        }),
        s(o, null, [
          {
            key: "VERSION",
            get: function () {
              return "4.2.1";
            },
          },
          {
            key: "Default",
            get: function () {
              return ie;
            },
          },
        ]),
        o
      );
    })();
  g(document).on(re.CLICK_DATA_API, fe, function (t) {
    var e,
      n = this,
      i = _.getSelectorFromElement(this);
    i && (e = document.querySelector(i));
    var o = g(e).data(te) ? "toggle" : l({}, g(e).data(), g(this).data());
    ("A" !== this.tagName && "AREA" !== this.tagName) || t.preventDefault();
    var r = g(e).one(re.SHOW, function (t) {
      t.isDefaultPrevented() ||
        r.one(re.HIDDEN, function () {
          g(n).is(":visible") && n.focus();
        });
    });
    me._jQueryInterface.call(g(e), o, this);
  }),
    (g.fn[$t] = me._jQueryInterface),
    (g.fn[$t].Constructor = me),
    (g.fn[$t].noConflict = function () {
      return (g.fn[$t] = ne), me._jQueryInterface;
    });
  var pe = "tooltip",
    ve = "bs.tooltip",
    Ee = "." + ve,
    ye = g.fn[pe],
    Ce = "bs-tooltip",
    Te = new RegExp("(^|\\s)" + Ce + "\\S+", "g"),
    Se = {
      animation: "boolean",
      template: "string",
      title: "(string|element|function)",
      trigger: "string",
      delay: "(number|object)",
      html: "boolean",
      selector: "(string|boolean)",
      placement: "(string|function)",
      offset: "(number|string)",
      container: "(string|element|boolean)",
      fallbackPlacement: "(string|array)",
      boundary: "(string|element)",
    },
    be = {
      AUTO: "auto",
      TOP: "top",
      RIGHT: "right",
      BOTTOM: "bottom",
      LEFT: "left",
    },
    Ie = {
      animation: !0,
      template:
        '<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',
      trigger: "hover focus",
      title: "",
      delay: 0,
      html: !1,
      selector: !1,
      placement: "top",
      offset: 0,
      container: !1,
      fallbackPlacement: "flip",
      boundary: "scrollParent",
    },
    De = "show",
    we = "out",
    Ae = {
      HIDE: "hide" + Ee,
      HIDDEN: "hidden" + Ee,
      SHOW: "show" + Ee,
      SHOWN: "shown" + Ee,
      INSERTED: "inserted" + Ee,
      CLICK: "click" + Ee,
      FOCUSIN: "focusin" + Ee,
      FOCUSOUT: "focusout" + Ee,
      MOUSEENTER: "mouseenter" + Ee,
      MOUSELEAVE: "mouseleave" + Ee,
    },
    Ne = "fade",
    Oe = "show",
    ke = ".tooltip-inner",
    Pe = ".arrow",
    Le = "hover",
    je = "focus",
    He = "click",
    Re = "manual",
    Ue = (function () {
      function i(t, e) {
        if ("undefined" == typeof u)
          throw new TypeError(
            "Bootstrap's tooltips require Popper.js (https://popper.js.org/)"
          );
        (this._isEnabled = !0),
          (this._timeout = 0),
          (this._hoverState = ""),
          (this._activeTrigger = {}),
          (this._popper = null),
          (this.element = t),
          (this.config = this._getConfig(e)),
          (this.tip = null),
          this._setListeners();
      }
      var t = i.prototype;
      return (
        (t.enable = function () {
          this._isEnabled = !0;
        }),
        (t.disable = function () {
          this._isEnabled = !1;
        }),
        (t.toggleEnabled = function () {
          this._isEnabled = !this._isEnabled;
        }),
        (t.toggle = function (t) {
          if (this._isEnabled)
            if (t) {
              var e = this.constructor.DATA_KEY,
                n = g(t.currentTarget).data(e);
              n ||
                ((n = new this.constructor(
                  t.currentTarget,
                  this._getDelegateConfig()
                )),
                g(t.currentTarget).data(e, n)),
                (n._activeTrigger.click = !n._activeTrigger.click),
                n._isWithActiveTrigger()
                  ? n._enter(null, n)
                  : n._leave(null, n);
            } else {
              if (g(this.getTipElement()).hasClass(Oe))
                return void this._leave(null, this);
              this._enter(null, this);
            }
        }),
        (t.dispose = function () {
          clearTimeout(this._timeout),
            g.removeData(this.element, this.constructor.DATA_KEY),
            g(this.element).off(this.constructor.EVENT_KEY),
            g(this.element).closest(".modal").off("hide.bs.modal"),
            this.tip && g(this.tip).remove(),
            (this._isEnabled = null),
            (this._timeout = null),
            (this._hoverState = null),
            (this._activeTrigger = null) !== this._popper &&
              this._popper.destroy(),
            (this._popper = null),
            (this.element = null),
            (this.config = null),
            (this.tip = null);
        }),
        (t.show = function () {
          var e = this;
          if ("none" === g(this.element).css("display"))
            throw new Error("Please use show on visible elements");
          var t = g.Event(this.constructor.Event.SHOW);
          if (this.isWithContent() && this._isEnabled) {
            g(this.element).trigger(t);
            var n = _.findShadowRoot(this.element),
              i = g.contains(
                null !== n ? n : this.element.ownerDocument.documentElement,
                this.element
              );
            if (t.isDefaultPrevented() || !i) return;
            var o = this.getTipElement(),
              r = _.getUID(this.constructor.NAME);
            o.setAttribute("id", r),
              this.element.setAttribute("aria-describedby", r),
              this.setContent(),
              this.config.animation && g(o).addClass(Ne);
            var s =
                "function" == typeof this.config.placement
                  ? this.config.placement.call(this, o, this.element)
                  : this.config.placement,
              a = this._getAttachment(s);
            this.addAttachmentClass(a);
            var l = this._getContainer();
            g(o).data(this.constructor.DATA_KEY, this),
              g.contains(
                this.element.ownerDocument.documentElement,
                this.tip
              ) || g(o).appendTo(l),
              g(this.element).trigger(this.constructor.Event.INSERTED),
              (this._popper = new u(this.element, o, {
                placement: a,
                modifiers: {
                  offset: { offset: this.config.offset },
                  flip: { behavior: this.config.fallbackPlacement },
                  arrow: { element: Pe },
                  preventOverflow: { boundariesElement: this.config.boundary },
                },
                onCreate: function (t) {
                  t.originalPlacement !== t.placement &&
                    e._handlePopperPlacementChange(t);
                },
                onUpdate: function (t) {
                  return e._handlePopperPlacementChange(t);
                },
              })),
              g(o).addClass(Oe),
              "ontouchstart" in document.documentElement &&
                g(document.body).children().on("mouseover", null, g.noop);
            var c = function () {
              e.config.animation && e._fixTransition();
              var t = e._hoverState;
              (e._hoverState = null),
                g(e.element).trigger(e.constructor.Event.SHOWN),
                t === we && e._leave(null, e);
            };
            if (g(this.tip).hasClass(Ne)) {
              var h = _.getTransitionDurationFromElement(this.tip);
              g(this.tip).one(_.TRANSITION_END, c).emulateTransitionEnd(h);
            } else c();
          }
        }),
        (t.hide = function (t) {
          var e = this,
            n = this.getTipElement(),
            i = g.Event(this.constructor.Event.HIDE),
            o = function () {
              e._hoverState !== De &&
                n.parentNode &&
                n.parentNode.removeChild(n),
                e._cleanTipClass(),
                e.element.removeAttribute("aria-describedby"),
                g(e.element).trigger(e.constructor.Event.HIDDEN),
                null !== e._popper && e._popper.destroy(),
                t && t();
            };
          if ((g(this.element).trigger(i), !i.isDefaultPrevented())) {
            if (
              (g(n).removeClass(Oe),
              "ontouchstart" in document.documentElement &&
                g(document.body).children().off("mouseover", null, g.noop),
              (this._activeTrigger[He] = !1),
              (this._activeTrigger[je] = !1),
              (this._activeTrigger[Le] = !1),
              g(this.tip).hasClass(Ne))
            ) {
              var r = _.getTransitionDurationFromElement(n);
              g(n).one(_.TRANSITION_END, o).emulateTransitionEnd(r);
            } else o();
            this._hoverState = "";
          }
        }),
        (t.update = function () {
          null !== this._popper && this._popper.scheduleUpdate();
        }),
        (t.isWithContent = function () {
          return Boolean(this.getTitle());
        }),
        (t.addAttachmentClass = function (t) {
          g(this.getTipElement()).addClass(Ce + "-" + t);
        }),
        (t.getTipElement = function () {
          return (this.tip = this.tip || g(this.config.template)[0]), this.tip;
        }),
        (t.setContent = function () {
          var t = this.getTipElement();
          this.setElementContent(g(t.querySelectorAll(ke)), this.getTitle()),
            g(t).removeClass(Ne + " " + Oe);
        }),
        (t.setElementContent = function (t, e) {
          var n = this.config.html;
          "object" == typeof e && (e.nodeType || e.jquery)
            ? n
              ? g(e).parent().is(t) || t.empty().append(e)
              : t.text(g(e).text())
            : t[n ? "html" : "text"](e);
        }),
        (t.getTitle = function () {
          var t = this.element.getAttribute("data-original-title");
          return (
            t ||
              (t =
                "function" == typeof this.config.title
                  ? this.config.title.call(this.element)
                  : this.config.title),
            t
          );
        }),
        (t._getContainer = function () {
          return !1 === this.config.container
            ? document.body
            : _.isElement(this.config.container)
            ? g(this.config.container)
            : g(document).find(this.config.container);
        }),
        (t._getAttachment = function (t) {
          return be[t.toUpperCase()];
        }),
        (t._setListeners = function () {
          var i = this;
          this.config.trigger.split(" ").forEach(function (t) {
            if ("click" === t)
              g(i.element).on(
                i.constructor.Event.CLICK,
                i.config.selector,
                function (t) {
                  return i.toggle(t);
                }
              );
            else if (t !== Re) {
              var e =
                  t === Le
                    ? i.constructor.Event.MOUSEENTER
                    : i.constructor.Event.FOCUSIN,
                n =
                  t === Le
                    ? i.constructor.Event.MOUSELEAVE
                    : i.constructor.Event.FOCUSOUT;
              g(i.element)
                .on(e, i.config.selector, function (t) {
                  return i._enter(t);
                })
                .on(n, i.config.selector, function (t) {
                  return i._leave(t);
                });
            }
          }),
            g(this.element)
              .closest(".modal")
              .on("hide.bs.modal", function () {
                i.element && i.hide();
              }),
            this.config.selector
              ? (this.config = l({}, this.config, {
                  trigger: "manual",
                  selector: "",
                }))
              : this._fixTitle();
        }),
        (t._fixTitle = function () {
          var t = typeof this.element.getAttribute("data-original-title");
          (this.element.getAttribute("title") || "string" !== t) &&
            (this.element.setAttribute(
              "data-original-title",
              this.element.getAttribute("title") || ""
            ),
            this.element.setAttribute("title", ""));
        }),
        (t._enter = function (t, e) {
          var n = this.constructor.DATA_KEY;
          (e = e || g(t.currentTarget).data(n)) ||
            ((e = new this.constructor(
              t.currentTarget,
              this._getDelegateConfig()
            )),
            g(t.currentTarget).data(n, e)),
            t && (e._activeTrigger["focusin" === t.type ? je : Le] = !0),
            g(e.getTipElement()).hasClass(Oe) || e._hoverState === De
              ? (e._hoverState = De)
              : (clearTimeout(e._timeout),
                (e._hoverState = De),
                e.config.delay && e.config.delay.show
                  ? (e._timeout = setTimeout(function () {
                      e._hoverState === De && e.show();
                    }, e.config.delay.show))
                  : e.show());
        }),
        (t._leave = function (t, e) {
          var n = this.constructor.DATA_KEY;
          (e = e || g(t.currentTarget).data(n)) ||
            ((e = new this.constructor(
              t.currentTarget,
              this._getDelegateConfig()
            )),
            g(t.currentTarget).data(n, e)),
            t && (e._activeTrigger["focusout" === t.type ? je : Le] = !1),
            e._isWithActiveTrigger() ||
              (clearTimeout(e._timeout),
              (e._hoverState = we),
              e.config.delay && e.config.delay.hide
                ? (e._timeout = setTimeout(function () {
                    e._hoverState === we && e.hide();
                  }, e.config.delay.hide))
                : e.hide());
        }),
        (t._isWithActiveTrigger = function () {
          for (var t in this._activeTrigger)
            if (this._activeTrigger[t]) return !0;
          return !1;
        }),
        (t._getConfig = function (t) {
          return (
            "number" ==
              typeof (t = l(
                {},
                this.constructor.Default,
                g(this.element).data(),
                "object" == typeof t && t ? t : {}
              )).delay && (t.delay = { show: t.delay, hide: t.delay }),
            "number" == typeof t.title && (t.title = t.title.toString()),
            "number" == typeof t.content && (t.content = t.content.toString()),
            _.typeCheckConfig(pe, t, this.constructor.DefaultType),
            t
          );
        }),
        (t._getDelegateConfig = function () {
          var t = {};
          if (this.config)
            for (var e in this.config)
              this.constructor.Default[e] !== this.config[e] &&
                (t[e] = this.config[e]);
          return t;
        }),
        (t._cleanTipClass = function () {
          var t = g(this.getTipElement()),
            e = t.attr("class").match(Te);
          null !== e && e.length && t.removeClass(e.join(""));
        }),
        (t._handlePopperPlacementChange = function (t) {
          var e = t.instance;
          (this.tip = e.popper),
            this._cleanTipClass(),
            this.addAttachmentClass(this._getAttachment(t.placement));
        }),
        (t._fixTransition = function () {
          var t = this.getTipElement(),
            e = this.config.animation;
          null === t.getAttribute("x-placement") &&
            (g(t).removeClass(Ne),
            (this.config.animation = !1),
            this.hide(),
            this.show(),
            (this.config.animation = e));
        }),
        (i._jQueryInterface = function (n) {
          return this.each(function () {
            var t = g(this).data(ve),
              e = "object" == typeof n && n;
            if (
              (t || !/dispose|hide/.test(n)) &&
              (t || ((t = new i(this, e)), g(this).data(ve, t)),
              "string" == typeof n)
            ) {
              if ("undefined" == typeof t[n])
                throw new TypeError('No method named "' + n + '"');
              t[n]();
            }
          });
        }),
        s(i, null, [
          {
            key: "VERSION",
            get: function () {
              return "4.2.1";
            },
          },
          {
            key: "Default",
            get: function () {
              return Ie;
            },
          },
          {
            key: "NAME",
            get: function () {
              return pe;
            },
          },
          {
            key: "DATA_KEY",
            get: function () {
              return ve;
            },
          },
          {
            key: "Event",
            get: function () {
              return Ae;
            },
          },
          {
            key: "EVENT_KEY",
            get: function () {
              return Ee;
            },
          },
          {
            key: "DefaultType",
            get: function () {
              return Se;
            },
          },
        ]),
        i
      );
    })();
  (g.fn[pe] = Ue._jQueryInterface),
    (g.fn[pe].Constructor = Ue),
    (g.fn[pe].noConflict = function () {
      return (g.fn[pe] = ye), Ue._jQueryInterface;
    });
  var We = "popover",
    xe = "bs.popover",
    Fe = "." + xe,
    qe = g.fn[We],
    Me = "bs-popover",
    Ke = new RegExp("(^|\\s)" + Me + "\\S+", "g"),
    Qe = l({}, Ue.Default, {
      placement: "right",
      trigger: "click",
      content: "",
      template:
        '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',
    }),
    Be = l({}, Ue.DefaultType, { content: "(string|element|function)" }),
    Ve = "fade",
    Ye = "show",
    Xe = ".popover-header",
    ze = ".popover-body",
    Ge = {
      HIDE: "hide" + Fe,
      HIDDEN: "hidden" + Fe,
      SHOW: "show" + Fe,
      SHOWN: "shown" + Fe,
      INSERTED: "inserted" + Fe,
      CLICK: "click" + Fe,
      FOCUSIN: "focusin" + Fe,
      FOCUSOUT: "focusout" + Fe,
      MOUSEENTER: "mouseenter" + Fe,
      MOUSELEAVE: "mouseleave" + Fe,
    },
    Je = (function (t) {
      var e, n;
      function i() {
        return t.apply(this, arguments) || this;
      }
      (n = t),
        ((e = i).prototype = Object.create(n.prototype)),
        ((e.prototype.constructor = e).__proto__ = n);
      var o = i.prototype;
      return (
        (o.isWithContent = function () {
          return this.getTitle() || this._getContent();
        }),
        (o.addAttachmentClass = function (t) {
          g(this.getTipElement()).addClass(Me + "-" + t);
        }),
        (o.getTipElement = function () {
          return (this.tip = this.tip || g(this.config.template)[0]), this.tip;
        }),
        (o.setContent = function () {
          var t = g(this.getTipElement());
          this.setElementContent(t.find(Xe), this.getTitle());
          var e = this._getContent();
          "function" == typeof e && (e = e.call(this.element)),
            this.setElementContent(t.find(ze), e),
            t.removeClass(Ve + " " + Ye);
        }),
        (o._getContent = function () {
          return (
            this.element.getAttribute("data-content") || this.config.content
          );
        }),
        (o._cleanTipClass = function () {
          var t = g(this.getTipElement()),
            e = t.attr("class").match(Ke);
          null !== e && 0 < e.length && t.removeClass(e.join(""));
        }),
        (i._jQueryInterface = function (n) {
          return this.each(function () {
            var t = g(this).data(xe),
              e = "object" == typeof n ? n : null;
            if (
              (t || !/dispose|hide/.test(n)) &&
              (t || ((t = new i(this, e)), g(this).data(xe, t)),
              "string" == typeof n)
            ) {
              if ("undefined" == typeof t[n])
                throw new TypeError('No method named "' + n + '"');
              t[n]();
            }
          });
        }),
        s(i, null, [
          {
            key: "VERSION",
            get: function () {
              return "4.2.1";
            },
          },
          {
            key: "Default",
            get: function () {
              return Qe;
            },
          },
          {
            key: "NAME",
            get: function () {
              return We;
            },
          },
          {
            key: "DATA_KEY",
            get: function () {
              return xe;
            },
          },
          {
            key: "Event",
            get: function () {
              return Ge;
            },
          },
          {
            key: "EVENT_KEY",
            get: function () {
              return Fe;
            },
          },
          {
            key: "DefaultType",
            get: function () {
              return Be;
            },
          },
        ]),
        i
      );
    })(Ue);
  (g.fn[We] = Je._jQueryInterface),
    (g.fn[We].Constructor = Je),
    (g.fn[We].noConflict = function () {
      return (g.fn[We] = qe), Je._jQueryInterface;
    });
  var Ze = "scrollspy",
    $e = "bs.scrollspy",
    tn = "." + $e,
    en = g.fn[Ze],
    nn = { offset: 10, method: "auto", target: "" },
    on = { offset: "number", method: "string", target: "(string|element)" },
    rn = {
      ACTIVATE: "activate" + tn,
      SCROLL: "scroll" + tn,
      LOAD_DATA_API: "load" + tn + ".data-api",
    },
    sn = "dropdown-item",
    an = "active",
    ln = '[data-spy="scroll"]',
    cn = ".nav, .list-group",
    hn = ".nav-link",
    un = ".nav-item",
    fn = ".list-group-item",
    dn = ".dropdown",
    gn = ".dropdown-item",
    _n = ".dropdown-toggle",
    mn = "offset",
    pn = "position",
    vn = (function () {
      function n(t, e) {
        var n = this;
        (this._element = t),
          (this._scrollElement = "BODY" === t.tagName ? window : t),
          (this._config = this._getConfig(e)),
          (this._selector =
            this._config.target +
            " " +
            hn +
            "," +
            this._config.target +
            " " +
            fn +
            "," +
            this._config.target +
            " " +
            gn),
          (this._offsets = []),
          (this._targets = []),
          (this._activeTarget = null),
          (this._scrollHeight = 0),
          g(this._scrollElement).on(rn.SCROLL, function (t) {
            return n._process(t);
          }),
          this.refresh(),
          this._process();
      }
      var t = n.prototype;
      return (
        (t.refresh = function () {
          var e = this,
            t = this._scrollElement === this._scrollElement.window ? mn : pn,
            o = "auto" === this._config.method ? t : this._config.method,
            r = o === pn ? this._getScrollTop() : 0;
          (this._offsets = []),
            (this._targets = []),
            (this._scrollHeight = this._getScrollHeight()),
            [].slice
              .call(document.querySelectorAll(this._selector))
              .map(function (t) {
                var e,
                  n = _.getSelectorFromElement(t);
                if ((n && (e = document.querySelector(n)), e)) {
                  var i = e.getBoundingClientRect();
                  if (i.width || i.height) return [g(e)[o]().top + r, n];
                }
                return null;
              })
              .filter(function (t) {
                return t;
              })
              .sort(function (t, e) {
                return t[0] - e[0];
              })
              .forEach(function (t) {
                e._offsets.push(t[0]), e._targets.push(t[1]);
              });
        }),
        (t.dispose = function () {
          g.removeData(this._element, $e),
            g(this._scrollElement).off(tn),
            (this._element = null),
            (this._scrollElement = null),
            (this._config = null),
            (this._selector = null),
            (this._offsets = null),
            (this._targets = null),
            (this._activeTarget = null),
            (this._scrollHeight = null);
        }),
        (t._getConfig = function (t) {
          if (
            "string" !=
            typeof (t = l({}, nn, "object" == typeof t && t ? t : {})).target
          ) {
            var e = g(t.target).attr("id");
            e || ((e = _.getUID(Ze)), g(t.target).attr("id", e)),
              (t.target = "#" + e);
          }
          return _.typeCheckConfig(Ze, t, on), t;
        }),
        (t._getScrollTop = function () {
          return this._scrollElement === window
            ? this._scrollElement.pageYOffset
            : this._scrollElement.scrollTop;
        }),
        (t._getScrollHeight = function () {
          return (
            this._scrollElement.scrollHeight ||
            Math.max(
              document.body.scrollHeight,
              document.documentElement.scrollHeight
            )
          );
        }),
        (t._getOffsetHeight = function () {
          return this._scrollElement === window
            ? window.innerHeight
            : this._scrollElement.getBoundingClientRect().height;
        }),
        (t._process = function () {
          var t = this._getScrollTop() + this._config.offset,
            e = this._getScrollHeight(),
            n = this._config.offset + e - this._getOffsetHeight();
          if ((this._scrollHeight !== e && this.refresh(), n <= t)) {
            var i = this._targets[this._targets.length - 1];
            this._activeTarget !== i && this._activate(i);
          } else {
            if (
              this._activeTarget &&
              t < this._offsets[0] &&
              0 < this._offsets[0]
            )
              return (this._activeTarget = null), void this._clear();
            for (var o = this._offsets.length; o--; ) {
              this._activeTarget !== this._targets[o] &&
                t >= this._offsets[o] &&
                ("undefined" == typeof this._offsets[o + 1] ||
                  t < this._offsets[o + 1]) &&
                this._activate(this._targets[o]);
            }
          }
        }),
        (t._activate = function (e) {
          (this._activeTarget = e), this._clear();
          var t = this._selector.split(",").map(function (t) {
              return (
                t + '[data-target="' + e + '"],' + t + '[href="' + e + '"]'
              );
            }),
            n = g([].slice.call(document.querySelectorAll(t.join(","))));
          n.hasClass(sn)
            ? (n.closest(dn).find(_n).addClass(an), n.addClass(an))
            : (n.addClass(an),
              n
                .parents(cn)
                .prev(hn + ", " + fn)
                .addClass(an),
              n.parents(cn).prev(un).children(hn).addClass(an)),
            g(this._scrollElement).trigger(rn.ACTIVATE, { relatedTarget: e });
        }),
        (t._clear = function () {
          [].slice
            .call(document.querySelectorAll(this._selector))
            .filter(function (t) {
              return t.classList.contains(an);
            })
            .forEach(function (t) {
              return t.classList.remove(an);
            });
        }),
        (n._jQueryInterface = function (e) {
          return this.each(function () {
            var t = g(this).data($e);
            if (
              (t ||
                ((t = new n(this, "object" == typeof e && e)),
                g(this).data($e, t)),
              "string" == typeof e)
            ) {
              if ("undefined" == typeof t[e])
                throw new TypeError('No method named "' + e + '"');
              t[e]();
            }
          });
        }),
        s(n, null, [
          {
            key: "VERSION",
            get: function () {
              return "4.2.1";
            },
          },
          {
            key: "Default",
            get: function () {
              return nn;
            },
          },
        ]),
        n
      );
    })();
  g(window).on(rn.LOAD_DATA_API, function () {
    for (
      var t = [].slice.call(document.querySelectorAll(ln)), e = t.length;
      e--;

    ) {
      var n = g(t[e]);
      vn._jQueryInterface.call(n, n.data());
    }
  }),
    (g.fn[Ze] = vn._jQueryInterface),
    (g.fn[Ze].Constructor = vn),
    (g.fn[Ze].noConflict = function () {
      return (g.fn[Ze] = en), vn._jQueryInterface;
    });
  var En = "bs.tab",
    yn = "." + En,
    Cn = g.fn.tab,
    Tn = {
      HIDE: "hide" + yn,
      HIDDEN: "hidden" + yn,
      SHOW: "show" + yn,
      SHOWN: "shown" + yn,
      CLICK_DATA_API: "click" + yn + ".data-api",
    },
    Sn = "dropdown-menu",
    bn = "active",
    In = "disabled",
    Dn = "fade",
    wn = "show",
    An = ".dropdown",
    Nn = ".nav, .list-group",
    On = ".active",
    kn = "> li > .active",
    Pn = '[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',
    Ln = ".dropdown-toggle",
    jn = "> .dropdown-menu .active",
    Hn = (function () {
      function i(t) {
        this._element = t;
      }
      var t = i.prototype;
      return (
        (t.show = function () {
          var n = this;
          if (
            !(
              (this._element.parentNode &&
                this._element.parentNode.nodeType === Node.ELEMENT_NODE &&
                g(this._element).hasClass(bn)) ||
              g(this._element).hasClass(In)
            )
          ) {
            var t,
              i,
              e = g(this._element).closest(Nn)[0],
              o = _.getSelectorFromElement(this._element);
            if (e) {
              var r = "UL" === e.nodeName || "OL" === e.nodeName ? kn : On;
              i = (i = g.makeArray(g(e).find(r)))[i.length - 1];
            }
            var s = g.Event(Tn.HIDE, { relatedTarget: this._element }),
              a = g.Event(Tn.SHOW, { relatedTarget: i });
            if (
              (i && g(i).trigger(s),
              g(this._element).trigger(a),
              !a.isDefaultPrevented() && !s.isDefaultPrevented())
            ) {
              o && (t = document.querySelector(o)),
                this._activate(this._element, e);
              var l = function () {
                var t = g.Event(Tn.HIDDEN, { relatedTarget: n._element }),
                  e = g.Event(Tn.SHOWN, { relatedTarget: i });
                g(i).trigger(t), g(n._element).trigger(e);
              };
              t ? this._activate(t, t.parentNode, l) : l();
            }
          }
        }),
        (t.dispose = function () {
          g.removeData(this._element, En), (this._element = null);
        }),
        (t._activate = function (t, e, n) {
          var i = this,
            o = (
              !e || ("UL" !== e.nodeName && "OL" !== e.nodeName)
                ? g(e).children(On)
                : g(e).find(kn)
            )[0],
            r = n && o && g(o).hasClass(Dn),
            s = function () {
              return i._transitionComplete(t, o, n);
            };
          if (o && r) {
            var a = _.getTransitionDurationFromElement(o);
            g(o)
              .removeClass(wn)
              .one(_.TRANSITION_END, s)
              .emulateTransitionEnd(a);
          } else s();
        }),
        (t._transitionComplete = function (t, e, n) {
          if (e) {
            g(e).removeClass(bn);
            var i = g(e.parentNode).find(jn)[0];
            i && g(i).removeClass(bn),
              "tab" === e.getAttribute("role") &&
                e.setAttribute("aria-selected", !1);
          }
          if (
            (g(t).addClass(bn),
            "tab" === t.getAttribute("role") &&
              t.setAttribute("aria-selected", !0),
            _.reflow(t),
            g(t).addClass(wn),
            t.parentNode && g(t.parentNode).hasClass(Sn))
          ) {
            var o = g(t).closest(An)[0];
            if (o) {
              var r = [].slice.call(o.querySelectorAll(Ln));
              g(r).addClass(bn);
            }
            t.setAttribute("aria-expanded", !0);
          }
          n && n();
        }),
        (i._jQueryInterface = function (n) {
          return this.each(function () {
            var t = g(this),
              e = t.data(En);
            if (
              (e || ((e = new i(this)), t.data(En, e)), "string" == typeof n)
            ) {
              if ("undefined" == typeof e[n])
                throw new TypeError('No method named "' + n + '"');
              e[n]();
            }
          });
        }),
        s(i, null, [
          {
            key: "VERSION",
            get: function () {
              return "4.2.1";
            },
          },
        ]),
        i
      );
    })();
  g(document).on(Tn.CLICK_DATA_API, Pn, function (t) {
    t.preventDefault(), Hn._jQueryInterface.call(g(this), "show");
  }),
    (g.fn.tab = Hn._jQueryInterface),
    (g.fn.tab.Constructor = Hn),
    (g.fn.tab.noConflict = function () {
      return (g.fn.tab = Cn), Hn._jQueryInterface;
    });
  var Rn = "toast",
    Un = "bs.toast",
    Wn = "." + Un,
    xn = g.fn[Rn],
    Fn = {
      CLICK_DISMISS: "click.dismiss" + Wn,
      HIDE: "hide" + Wn,
      HIDDEN: "hidden" + Wn,
      SHOW: "show" + Wn,
      SHOWN: "shown" + Wn,
    },
    qn = "fade",
    Mn = "hide",
    Kn = "show",
    Qn = "showing",
    Bn = { animation: "boolean", autohide: "boolean", delay: "number" },
    Vn = { animation: !0, autohide: !0, delay: 500 },
    Yn = '[data-dismiss="toast"]',
    Xn = (function () {
      function i(t, e) {
        (this._element = t),
          (this._config = this._getConfig(e)),
          (this._timeout = null),
          this._setListeners();
      }
      var t = i.prototype;
      return (
        (t.show = function () {
          var t = this;
          g(this._element).trigger(Fn.SHOW),
            this._config.animation && this._element.classList.add(qn);
          var e = function () {
            t._element.classList.remove(Qn),
              t._element.classList.add(Kn),
              g(t._element).trigger(Fn.SHOWN),
              t._config.autohide && t.hide();
          };
          if (
            (this._element.classList.remove(Mn),
            this._element.classList.add(Qn),
            this._config.animation)
          ) {
            var n = _.getTransitionDurationFromElement(this._element);
            g(this._element).one(_.TRANSITION_END, e).emulateTransitionEnd(n);
          } else e();
        }),
        (t.hide = function (t) {
          var e = this;
          this._element.classList.contains(Kn) &&
            (g(this._element).trigger(Fn.HIDE),
            t
              ? this._close()
              : (this._timeout = setTimeout(function () {
                  e._close();
                }, this._config.delay)));
        }),
        (t.dispose = function () {
          clearTimeout(this._timeout),
            (this._timeout = null),
            this._element.classList.contains(Kn) &&
              this._element.classList.remove(Kn),
            g(this._element).off(Fn.CLICK_DISMISS),
            g.removeData(this._element, Un),
            (this._element = null),
            (this._config = null);
        }),
        (t._getConfig = function (t) {
          return (
            (t = l(
              {},
              Vn,
              g(this._element).data(),
              "object" == typeof t && t ? t : {}
            )),
            _.typeCheckConfig(Rn, t, this.constructor.DefaultType),
            t
          );
        }),
        (t._setListeners = function () {
          var t = this;
          g(this._element).on(Fn.CLICK_DISMISS, Yn, function () {
            return t.hide(!0);
          });
        }),
        (t._close = function () {
          var t = this,
            e = function () {
              t._element.classList.add(Mn), g(t._element).trigger(Fn.HIDDEN);
            };
          if ((this._element.classList.remove(Kn), this._config.animation)) {
            var n = _.getTransitionDurationFromElement(this._element);
            g(this._element).one(_.TRANSITION_END, e).emulateTransitionEnd(n);
          } else e();
        }),
        (i._jQueryInterface = function (n) {
          return this.each(function () {
            var t = g(this),
              e = t.data(Un);
            if (
              (e ||
                ((e = new i(this, "object" == typeof n && n)), t.data(Un, e)),
              "string" == typeof n)
            ) {
              if ("undefined" == typeof e[n])
                throw new TypeError('No method named "' + n + '"');
              e[n](this);
            }
          });
        }),
        s(i, null, [
          {
            key: "VERSION",
            get: function () {
              return "4.2.1";
            },
          },
          {
            key: "DefaultType",
            get: function () {
              return Bn;
            },
          },
        ]),
        i
      );
    })();
  (g.fn[Rn] = Xn._jQueryInterface),
    (g.fn[Rn].Constructor = Xn),
    (g.fn[Rn].noConflict = function () {
      return (g.fn[Rn] = xn), Xn._jQueryInterface;
    }),
    (function () {
      if ("undefined" == typeof g)
        throw new TypeError(
          "Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript."
        );
      var t = g.fn.jquery.split(" ")[0].split(".");
      if (
        (t[0] < 2 && t[1] < 9) ||
        (1 === t[0] && 9 === t[1] && t[2] < 1) ||
        4 <= t[0]
      )
        throw new Error(
          "Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0"
        );
    })(),
    (t.Util = _),
    (t.Alert = p),
    (t.Button = P),
    (t.Carousel = lt),
    (t.Collapse = bt),
    (t.Dropdown = Zt),
    (t.Modal = me),
    (t.Popover = Je),
    (t.Scrollspy = vn),
    (t.Tab = Hn),
    (t.Toast = Xn),
    (t.Tooltip = Ue),
    Object.defineProperty(t, "__esModule", { value: !0 });
});
//# sourceMappingURL=bootstrap.min.js.map
